@using Microsoft.AspNetCore.Http
@model WebENG.Models.UserModel;
@{
    ViewData["Title"] = "Leave";
}
<div class="row p-3">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-body">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
</div>

<!-- Task Modal -->
<div class="modal fade" id="modal_leave" tabindex="-1" role="dialog" aria-hidden="true" style="overflow-y:hidden">
    <div class="modal modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal_leave_title">ยื่นการลา</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="overflow-y:auto;height:600px">
                <form>
                    <div class="form-group row">
                        <div class="col-xl-6 col-md-6 col-sm-12">
                            <label for="request_id">ประเภทการลา</label>
                            <select id="" class="form-control">
                                <option value="">ลาพักร้อน (5)</option>
                                <option value="">ลาป่วย (30)</option>
                            </select>
                        </div>
                        <div class="col-xl-6 col-md-6 col-sm-12">
                            <label for="working_date">ช่วงเวลา</label>
                            <div class="row">
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button id="leave_full" type="button" class="btn btn-outline-primary">ทั้งวัน</button>
                                    <button id="leave_hours" type="button" class="btn btn-outline-secondary">ชั่วโมง</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div id="date_group" class="form-group row">
                        <div class="col-xl-4 col-md-4 col-sm-6">
                            <label for="start_date">ลาตั้งแต่วันที่</label>
                            <input id="start_date" type="date" class="form-control" />
                        </div>
                        <div class="col-xl-2 col-md-2 col-sm-6">
                            <label for="stop_date">จำนวน</label>
                            <input id="stop_date" type="number" class="form-control" value="1" />
                        </div>
                        <div class="col-xl-3 col-md-3 col-sm-6">
                            <label for="start_time">เวลาเริ่มต้น</label>
                            <input id="start_time" type="time" class="form-control" />
                        </div>
                        <div class="col-xl-3 col-md-3 col-sm-6">
                            <label for="stop_time">เวลาสิ้นสุด</label>
                            <input id="stop_time" type="time" class="form-control" />
                        </div>
                    </div>
                    <hr />
                    <div id="date_group" class="form-group row">
                        <div class="col-12">
                            <label for="start_date">แนบไฟล์</label>
                            <div id="uploadForm" enctype="multipart/form-data">
                                <div id="fileInputs">
                                    <div class="file-input">
                                        <div class="row">
                                            <div class="col-9">
                                                <input type="file" name="files" accept=".pdf,.jpg,.png,.xls,.xlsx" />
                                            </div>

                                            <div class="col-3">
                                                <button type="button" id="addFileInput" class="btn btn-primary">เพิ่มไฟล์</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div id="date_group" class="form-group row">
                        <div class="col-12">
                            <label for="start_date">เอกสาร</label>
                            <div class="row">
                                <div class="col-6">
                                    <ul>
                                        <li>AAAAAAAA</li>
                                    </ul>
                                </div>
                                <div class="col-6">
                                    <button type="button" id="addFileInput" class="btn btn-danger">ลบ</button>
                                </div>
                                <div class="col-6">
                                    <ul>
                                        <li>BBBBB</li>
                                    </ul>
                                </div>
                                <div class="col-6">
                                    <button type="button" id="addFileInput" class="btn btn-danger">ลบ</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="note">รายละเอียด</label>
                                <textarea id="note" class="form-control" rows="2" placeholder="Note or Description"></textarea>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group row">
                        <div class="col-12">
                            <label for="start_date">ผู้อนุมัติ</label>
                            <div class="col-12">
                                <label for="start_date" style="font-size:14px">ผู้จัดการ</label>
                                <div class="row">
                                    <div class="col-6">
                                        <ul>
                                            <li>AAAAA</li>
                                        </ul>
                                    </div>
                                    <div class="col-6">
                                        <label style="font-size:14px">รออนุมัติ</label>
                                    </div>
                                </div>

                            </div>
                            <div class="col-12">
                                <label for="start_date" style="font-size:14px">แอดมิน</label>
                                <div class="row">
                                    <div class="col-6">
                                        <ul>
                                            <li>BBBBB</li>
                                        </ul>
                                    </div>
                                    <div class="col-6">
                                        <label style="font-size:14px">รออนุมัติ</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer d-flex">
                <button id="btn_delete" type="button" class="btn btn-danger mr-auto elevation-1">
                    <i class="fas fa-trash-alt"></i> ลบ
                </button>
                <button type="button" class="btn btn-secondary elevation-1" data-dismiss="modal">
                    <i class="fas fa-times"></i> ยกเลิก
                </button>
                <button id="btn_accept" type="button" class="btn btn-primary elevation-1">
                    <i class="fas fa-check"></i> ส่งเอกสาร
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Alert -->
<div class="modal fade" id="modal_alert" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="modal_alert_title">Alert</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="alert_content" class="form-group">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Delete -->
<div id="modal_delete" class="modal fade">
    <div class="modal modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger">
                <h5 class="modal-title" id="modal_alert_title">Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <span>Are you sure you want to delete this ?</span>
                    </div>
                </form>
            </div>
            <div class="modal-footer d-flex">
                <button id="btn_confirm_delete" type="button" class="btn btn-danger elevation-1 mr-auto">
                    <i class="fas fa-trash-alt"></i> Confirm Delete
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        let users = [];
        let holidays = [];
        let calendar;
        let calendarEl;
        let drag = false;
        let overlap = true;

        $(document).ready(async function () {
            await GetHolidays();
            await GenerateCalendar();
        });

        async function GetHolidays() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetHolidays", "Holiday")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    holidays = response;
                }
            });
        };

        async function GenerateCalendar() {
            let datas = [];
            let whs = [];
            for (let i = 0; i < whs.length; i++) {
                let start_date = new Date(whs[i].working_date);
                let enable_edit = false;

                if (eng.role === "Admin" || eng.allow_edit === true) {
                    enable_edit = true;
                } else {
                    let today = new Date();
                    let date_diff = Math.floor((today - start_date) / (1000 * 60 * 60 * 24));
                    enable_edit = date_diff < 15 ? true : false;
                }

                datas.push(
                    {
                        title: whs[i].job_name + ": " + whs[i].task_name,
                        start: start_date.setHours(whs[i].start_time.split(":")[0], whs[i].start_time.split(":")[1]),
                        end: start_date.setHours(whs[i].stop_time.split(":")[0], whs[i].stop_time.split(":")[1]),
                        allDay: false,
                        editable: enable_edit,
                        overlap: true,
                        extendedProps: {
                            "index": whs[i].index,
                            "user_id": whs[i].user_id,
                            "user_name": whs[i].user_name,
                            "working_date": whs[i].working_date,
                            "job_id": whs[i].job_id,
                            "job_name": whs[i].job_name,
                            "process_id": whs[i].process_id,
                            "process_name":whs[i].process_name,
                            "system_id":whs[i].system_id,
                            "system_name":whs[i].system_name,
                            "task_id": whs[i].task_id,
                            "task_name": whs[i].task_name,
                            "start_time": whs[i].start_time,
                            "stop_time": whs[i].stop_time,
                            "wh_type": whs[i].wh_type,
                            "lunch_full": whs[i].lunch_full,
                            "lunch_half": whs[i].lunch_half,
                            "dinner_full": whs[i].dinner_full,
                            "dinner_half": whs[i].dinner_half,
                            "note": whs[i].note,
                        }
                    }
                );
            }

            calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                views: {
                    dayGridMonth: {
                        displayEventTime: true,
                        displayEventEnd: true,
                        eventTimeFormat: {
                            hour: '2-digit',
                            minute: '2-digit',
                            hour12: false,
                            meridiem: false
                        },
                    }
                },
                headerToolbar: {
                    left: 'dayGridMonth,listMonth,timeGridWeek,timeGridDay',
                    center: 'title',
                    right: 'prev,next'
                },
                events: datas,
                height: 750,
                editable: true,
                eventDrop: async function (info) {
                    let enable = false;
                    let drop_date = new Date(info.event.startStr.split("T")[0]);
                    let today = new Date();
                    let date_diff = Math.floor((today - drop_date) / (1000 * 60 * 60 * 24));
                    let drop_overlap = await CheckDropOverlap(info.event.extendedProps, drop_date.toISOString().split("T")[0]);
                    if (drop_overlap === true) {
                        $('#modal_alert_title').text('Alert Task Overlap');
                        $('#alert_content').html('<p>Task Overlap</p>');
                        $('#modal_alert').modal();
                        info.revert();
                        return;
                    }

                    if (date_diff < 15) {
                        enable = true;
                    }
                    else {
                        enable = CheckAllowEditable();
                    }

                    if (enable == true) {
                        DropTask(info.event);
                    }
                    else {
                        $('#modal_alert_title').text('Alert Edit Task');
                        $('#alert_content').html('<p>You are not allow to edit task in beyond past 2 weeks</p>');
                        $('#modal_alert').modal();
                        info.revert();
                    }
                },
                selectable: true,
                select: function (info) {
                    let date_start = info.startStr;
                    let date_end = info.endStr.split("-")[0] + "-" + info.endStr.split("-")[1] + "-" + parseInt(info.endStr.split("-")[2] - 1).toString().padStart(2,'0');
                    let date_diff = Math.floor((new Date(date_end) - new Date(date_start)) / (1000 * 60 * 60 * 24));
                    if (date_diff === 0 || isNaN(date_diff)) {
                        console.log(info);
                        console.log(date_end);

                        AddTasks(date_start, date_end)
                    }
                    else {
                        AddTasks(date_start,date_end)
                    }
                },
                eventClick: async function (info) {
                    EditTask(info.event);
                },
            });

            let weekend = [
                {
                    daysOfWeek: [0, 6],
                    display: 'background',
                    color: "#CCCCCC",
                    allDay: true,
                    overlap: true,
                    resourceEditable: false
                }
            ];
            calendar.addEventSource(weekend);

            let e_holidays = [];
            for (let i = 0; i < holidays.length; i++) {
                e_holidays.push(
                    {
                        id: (i+1),
                        title: holidays[i].detail,
                        start: holidays[i].date.split("T")[0],
                        display: 'background',
                        color: "#FF9999",
                        allDay: true,
                        overlap: true,
                        resourceEditable: false
                    }
                );
            }

            calendar.addEventSource(e_holidays);
            calendar.render();
        }

        async function AddTasks(date_start, date_end) {
            let show_modal = 0;
            let today = new Date();
            let edit_date = new Date(date_start);
            let date_diff = Math.floor((today - edit_date) / (1000 * 60 * 60 * 24));

            if (date_diff < 15) {
                show_modal = 1;
            }
            else {
                show_modal = await CheckAllowEditable();
            }

            if (show_modal) {
                update = false;
                //await GetLastWorkingHoursID();
                //await GetUsers();
                //await GenerateUsersOption();
                //await GetJobs();
                //await GetQuotations();
                //await GenerateCustomerOptions();
                //await GenerateJobsOption();
                //await GenerateLocationOption();
                //await GetTasks();
                //await GenerateTasksOption();
                PrepmodalTasks(date_start, date_end);

            }
        }

         function PrepmodalTasks(date_start, date_end) {
            $('#modal_leave').modal();
            $('#modal_task_title').text("Add Tasks");
            let user_name = '@Model.name.ToLower()';
            let user_id = users.filter(f => f.name.toLowerCase() === user_name).map(m => m.user_id);
            $('$working_hour_id').val(last_id);
            $('#user_id').val(user_id);
            $('#working_date_group').hide();
            $('#working_date').attr('disabled', true);
            $('#working_date').val(null);
            $('#date_group').show();
            $('#start_date').val(date_start);
            $('#stop_date').val(date_end);
            $('#location').attr('disabled', true);
            $('#task_id').attr('disabled', true);
            $('#start_time').val("08:30");
            $('#stop_time').val("17:30");
            $('#note').val(null);
            $('#btn_delete').hide();
        }

        async function CheckAddOverlap(wh_string) {
            let task = JSON.parse(wh_string);
            let date = task.working_date;
            let start_time = new Date();
            start_time.setHours(task.start_time.split(":")[0]);
            start_time.setMinutes(task.start_time.split(":")[1]);
            start_time.setSeconds(0);
            start_time.setMilliseconds(0);
            let stop_time = new Date();
            stop_time.setHours(task.stop_time.split(":")[0]);
            stop_time.setMinutes(task.stop_time.split(":")[1]);
            stop_time.setSeconds(0);
            stop_time.setMilliseconds(0);
            await GetWorkingHoursByDate("@Model.name", date);
            if (update) {
                wh_day = wh_day.filter(f => f.index !== task.index);
            }
            for (let i = 0; i < wh_day.length; i++) {
                let task_start = new Date();
                let task_stop = new Date();
                task_start.setHours(wh_day[i].start_time.split(":")[0]);
                task_start.setMinutes(wh_day[i].start_time.split(":")[1]);
                task_start.setSeconds(0);
                task_start.setMilliseconds(0);
                task_stop.setHours(wh_day[i].stop_time.split(":")[0]);
                task_stop.setMinutes(wh_day[i].stop_time.split(":")[1]);
                task_stop.setSeconds(0);
                task_stop.setMilliseconds(0);
                if (start_time >= task_start && start_time < task_stop) {
                    return true;
                }
                if (stop_time > task_start && stop_time < task_stop) {
                    return true;
                }
                if (task_start >= start_time && task_start < stop_time) {
                    return true;
                }
                if (task_stop > start_time && task_stop < stop_time) {
                    return true;
                }
            }
            return false;
        }

        async function CheckAddTasksOverlap(wh_string) {
            let task = JSON.parse(wh_string);
            let date = task.working_date;
            let start_time = new Date();
            start_time.setHours(task.start_time.split(":")[0]);
            start_time.setMinutes(task.start_time.split(":")[1]);
            start_time.setSeconds(0);
            start_time.setMilliseconds(0);
            let stop_time = new Date();
            stop_time.setHours(task.stop_time.split(":")[0]);
            stop_time.setMinutes(task.stop_time.split(":")[1]);
            stop_time.setSeconds(0);
            stop_time.setMilliseconds(0);
            await GetWorkingHoursByDate("@Model.name", date);
            for (let i = 0; i < wh_day.length; i++) {
                let task_start = new Date();
                let task_stop = new Date();
                task_start.setHours(wh_day[i].start_time.split(":")[0]);
                task_start.setMinutes(wh_day[i].start_time.split(":")[1]);
                task_start.setSeconds(0);
                task_start.setMilliseconds(0);
                task_stop.setHours(wh_day[i].stop_time.split(":")[0]);
                task_stop.setMinutes(wh_day[i].stop_time.split(":")[1]);
                task_stop.setSeconds(0);
                task_stop.setMilliseconds(0);
                if (start_time >= task_start && start_time < task_stop) {
                    return true;
                }
                if (stop_time > task_start && stop_time < task_stop) {
                    return true;
                }
                if (task_start >= start_time && task_start < stop_time) {
                    return true;
                }
                if (task_stop > start_time && task_stop < stop_time) {
                    return true;
                }
            }
            return false;
        }

        async function CheckDropOverlap(task, date) {
            let start_time = new Date();
            start_time.setHours(task.start_time.split(":")[0]);
            start_time.setMinutes(task.start_time.split(":")[1]);
            start_time.setSeconds(0);
            start_time.setMilliseconds(0);
            let stop_time = new Date();
            stop_time.setHours(task.stop_time.split(":")[0]);
            stop_time.setMinutes(task.stop_time.split(":")[1]);
            stop_time.setSeconds(0);
            stop_time.setMilliseconds(0);
            await GetWorkingHoursByDate("@Model.name", date);
            for (let i = 0; i < wh_day.length; i++) {
                let task_start = new Date();
                task_start.setHours(wh_day[i].start_time.split(":")[0]);
                task_start.setMinutes(wh_day[i].start_time.split(":")[1]);
                task_start.setSeconds(0);
                task_start.setMilliseconds(0);
                let task_stop = new Date();
                task_stop.setHours(wh_day[i].stop_time.split(":")[0]);
                task_stop.setMinutes(wh_day[i].stop_time.split(":")[1]);
                task_stop.setSeconds(0);
                task_stop.setMilliseconds(0);
                if (start_time >= task_start && start_time < task_stop) {
                    return true;
                }
                if (stop_time > task_start && stop_time < task_stop) {
                    return true;
                }
                if (task_start >= start_time && task_start < stop_time) {
                    return true;
                }
                if (task_stop > start_time && task_stop < stop_time) {
                    return true;
                }
            }
            return false;
        }

    </script>
}
