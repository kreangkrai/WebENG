@using Microsoft.AspNetCore.Http
@model WebENG.Models.UserModel;
@{
    ViewData["Title"] = "Summary Job In hand";
}

<div class="row p-4" style="row-gap:5px">
    <div class="col-xl-12">
        <div class="card card-dark">
            <div class="card-body">
                <div class="row" style="row-gap:10px">
                    <div class="col-xl-4">

                    </div>
                    <div class="col-xl-2">
                        <select id="departments" class="form-control">
                            <option value="" selected disabled>Please Select Department</option>
                            <option value="ENG">ENG</option>
                            <option value="CIS">CIS</option>
                            <option value="AIS">AIS</option>
                        </select>
                    </div>
                    <div class="col-xl-2">
                        <select id="year" class="form-control">
                            <option value="" selected disabled>Please Select Year</option>
                        </select>
                    </div>
                    <div class="col-xl-2">
                        <button id="btnUpdate" type="button" class="btn btn-primary form-control">
                            Update
                        </button>
                    </div>
                    <div class="col-xl-2">
                        <button id="btnExport" type="button" class="btn btn-success form-control">
                            Export
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card card-dark">
            <div class="card-body">
                <canvas id="chart_acc_job_in_hand" style="height:400px" />
            </div>
        </div>
        <div class="card card-dark">
            <div class="card-body">
                <canvas id="chart_project_job_in_hand" style="height:400px" />
            </div>
        </div> 
        <div class="card card-dark">
            <div class="card-body">
                <canvas id="chart_service_job_in_hand" style="height:400px" />
            </div>
        </div>
        <div class="row">
            <div class="col-5">
                <div class="card card-dark">
                    <div class="card-header">
                        <span class="card-title">JOB IN HAND</span>
                    </div>
                    <div class="card-body">
                        <div class="row" style="row-gap:10px">
                            <div class="col-md-4">
                                <label class="d-flex justify-content-center" for="jobinhand_project">Job Project</label>
                                <div class="input-group">
                                    <input id="jobinhand_project" type="text" class="form-control"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text">MB</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="d-flex justify-content-center" for="jobinhand_service">Job Service</label>
                                <div class="input-group">
                                    <input id="jobinhand_service" type="text" class="form-control"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text">MB</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="d-flex justify-content-center" for="jobinhand_total">Total</label>
                                <div class="input-group">
                                    <input id="jobinhand_total" type="text" class="form-control"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text">MB</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>      
        <div class="card card-primary">
            <div class="card-header">
                <span class="card-title">JOB IN HAND PROJECT</span>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <div class="col-xl-12" style="overflow-x:auto">
                        <table id="table_project" class="table-bordered display compact stripe table-striped row-border order-column responsive" style="width:100%;font-size:16px">
                            <thead class="display compact text-center" style="background-color:#429DD8">
                                <tr>
                                    <th>No.</th>
                                    <th>Job No.</th>
                                    <th>Customer Name</th>
                                    <th>Project Name</th>
                                    <th>% Cost</th>
                                    <th>% Invoice</th>
                                    <th>Remaining Amount</th>
                                </tr>
                            </thead>                           
                            <tbody></tbody>
                        </table>
                    </div>
               </div>
            </div>
        </div>
        <div class="card card-success">
            <div class="card-header">
                <span class="card-title">JOB IN HAND SERVICE</span>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <div class="col-xl-12" style="overflow-x:auto">
                        <table id="table_service" class="table-bordered display compact stripe table-striped row-border order-column responsive" style="width:100%;font-size:16px">
                            <thead class="display compact text-center" style="background-color:#429DD8">
                                <tr>
                                    <th>No.</th>
                                    <th>Job No.</th>
                                    <th>Customer Name</th>
                                    <th>Project Name</th>
                                    <th>% Cost</th>
                                    <th>% Invoice</th>
                                    <th>Remaining Amount</th>
                                </tr>
                            </thead>                           
                            <tbody></tbody>
                        </table>
                    </div>
               </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        var table_project;
        var table_service;
        let chart_acc;
        let chart_project;
        let chart_service;
        let acc_jobs_in_hand = [];
        let jobs_in_hand_project = [];
        let jobs_in_hand_service = [];
        let projects_in_hand = [];
        let services_in_hand = [];
        $(document).ready(async function () {
            getYear();
        });
        function getYear(){
            var year_string = "";
            var today = new Date();
            var year = today.getFullYear();
            for (var i = year; i > year - 5; i--) {
                year_string += `<option value="${i}">${i}</option>`;
            }
            $('#year').empty();
            $('#year').append(year_string);
        };

        function JobInHand(department){
            let sum = 0;
            let sum_project = 0;
            let sum_service = 0;
            if (department === "ENG") {
                sum_project = (projects_in_hand.map(m => m.job_eng_in_hand).reduce((acc, x) => Number(acc) + Number(x), 0) / 1000000).toFixed(2);
                sum_service = (services_in_hand.map(m => m.job_eng_in_hand).reduce((acc, x) => Number(acc) + Number(x), 0) / 1000000).toFixed(2);
                sum = (Number(sum_project) + Number(sum_service)).toFixed(2);
            }
            if (department === "CIS") {
                sum_project = (projects_in_hand.map(m => m.job_cis_in_hand).reduce((acc, x) => Number(acc) + Number(x), 0) / 1000000).toFixed(2);
                sum_service = (services_in_hand.map(m => m.job_cis_in_hand).reduce((acc, x) => Number(acc) + Number(x), 0) / 1000000).toFixed(2);
                sum = (Number(sum_project) + Number(sum_service)).toFixed(2);
            }
            if (department === "AIS") {
                sum_project = (projects_in_hand.map(m => m.job_ais_in_hand).reduce((acc, x) => Number(acc) + Number(x), 0) / 1000000).toFixed(2);
                sum_service = (services_in_hand.map(m => m.job_ais_in_hand).reduce((acc, x) => Number(acc) + Number(x), 0) / 1000000).toFixed(2);
                sum = (Number(sum_project) + Number(sum_service)).toFixed(2);
            }
            $('#jobinhand_project').val(sum_project);
            $('#jobinhand_service').val(sum_service);
            $('#jobinhand_total').val(sum);
        }

        async function GetACCJobInHand(department,year,type) {            
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetAccJobInHand", "JobInHand")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { department,year,type },
                success: function (response) {
                    acc_jobs_in_hand = response;
                }
            });
        };

        async function GetJobInHandProject(department,year,type) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetJobInHandProject", "JobInHand")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { department,year,type },
                success: function (response) {
                    jobs_in_hand_project = response;
                }
            });
        };

        async function GetJobInHandService(department,year,type) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetJobInHandService", "JobInHand")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { department,year,type },
                success: function (response) {
                    jobs_in_hand_service = response;
                }
            });
        };

        async function GetProjectInHand(department,year) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetProjectInHand", "JobInHand")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { department,year },
                success: function (response) {
                    projects_in_hand = response;
                }
            });
        };
        async function GetServiceInHand(department,year) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetServiceInHand", "JobInHand")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { department,year },
                success: function (response) {
                    services_in_hand = response;
                }
            });
        };
        $('#btnUpdate').on('click',async function(){
            let year = $('#year').val();
            let department = $('#departments :selected').text();
            await GetACCJobInHand(department,year,"ALL");
            await GetJobInHandProject(department,year,"Project");
            await GetJobInHandService(department,year,"Service");
            await GetProjectInHand(department,year);
            await GetServiceInHand(department, year);

            if (department === "ENG") {
                GenerateENGChartAcc(year, acc_jobs_in_hand);
                GenerateENGChartProject(year, jobs_in_hand_project);
                GenerateENGChartService(year, jobs_in_hand_service);
                GenerateENGTableProject(projects_in_hand);
                GenerateENGTableService(services_in_hand);                
            }
            if (department === "CIS") {
                GenerateCISChartAcc(year, acc_jobs_in_hand);
                GenerateCISChartProject(year, jobs_in_hand_project);
                GenerateCISChartService(year, jobs_in_hand_service);
                GenerateCISTableProject(projects_in_hand);
                GenerateCISTableService(services_in_hand);
            }
            if (department === "AIS") {
                GenerateAISChartAcc(year, acc_jobs_in_hand);
                GenerateAISChartProject(year, jobs_in_hand_project);
                GenerateAISChartService(year, jobs_in_hand_service);
                GenerateAISTableProject(projects_in_hand);
                GenerateAISTableService(services_in_hand);
            }
            JobInHand(department);
        });

        function GenerateENGChartAcc(year,jobs) {
            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_eng_in_hand);

            if (chart_acc !== undefined) {
                chart_acc.destroy();
            }

            const ctx = document.getElementById('chart_acc_job_in_hand').getContext('2d');
            chart_acc = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND ENG ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }
        function GenerateCISChartAcc(year, jobs) {
            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_cis_in_hand);

            if (chart_acc !== undefined) {
                chart_acc.destroy();
            }

            const ctx = document.getElementById('chart_acc_job_in_hand').getContext('2d');
            chart_acc = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND CIS ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }
        function GenerateAISChartAcc(year, jobs) {
            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_ais_in_hand);

            if (chart_acc !== undefined) {
                chart_acc.destroy();
            }

            const ctx = document.getElementById('chart_acc_job_in_hand').getContext('2d');
            chart_acc = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND AIS ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }

        function GenerateENGChartProject(year, jobs) {

            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_eng_in_hand);

            if (chart_project !== undefined) {
                chart_project.destroy();
            }

            const ctx = document.getElementById('chart_project_job_in_hand').getContext('2d');
            chart_project = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND ENG PROJECT FOR ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }
        function GenerateCISChartProject(year, jobs) {

            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_cis_in_hand);

            if (chart_project !== undefined) {
                chart_project.destroy();
            }

            const ctx = document.getElementById('chart_project_job_in_hand').getContext('2d');
            chart_project = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND CIS PROJECT FOR ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }
        function GenerateAISChartProject(year, jobs) {

            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_ais_in_hand);

            if (chart_project !== undefined) {
                chart_project.destroy();
            }

            const ctx = document.getElementById('chart_project_job_in_hand').getContext('2d');
            chart_project = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND AIS PROJECT FOR ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }

        function GenerateENGChartService(year,jobs) {

            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_eng_in_hand);

            if (chart_service !== undefined) {
                chart_service.destroy();
            }

            const ctx = document.getElementById('chart_service_job_in_hand').getContext('2d');
            chart_service = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND ENG SERVICE FOR ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }
        function GenerateCISChartService(year, jobs) {

            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_cis_in_hand);

            if (chart_service !== undefined) {
                chart_service.destroy();
            }

            const ctx = document.getElementById('chart_service_job_in_hand').getContext('2d');
            chart_service = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND CIS SERVICE FOR ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }
        function GenerateAISChartService(year, jobs) {

            let colors = ['#04CA13', '#F0390C'];

            let months = jobs.map(m => m.month);
            let targets = jobs.map(m => m.target_month);
            let actuals = jobs.map(m => m.job_ais_in_hand);

            if (chart_service !== undefined) {
                chart_service.destroy();
            }

            const ctx = document.getElementById('chart_service_job_in_hand').getContext('2d');
            chart_service = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Target',
                            data: targets,
                            borderWidth: 3,
                            backgroundColor: colors[0],
                            borderColor: colors[0]
                        },
                        {
                            label: 'Actual',
                            data: actuals,
                            borderWidth: 3,
                            backgroundColor: colors[1],
                            borderColor: colors[1]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            title: {
                                text: "MB",
                                display: true
                            },
                            stacked: false,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            text: `SUMMARY OF JOB IN HAND AIS SERVICE FOR ${year}`,
                            display: true
                        },
                        legend: {
                            position: 'bottom',
                            display: true
                        }
                    },
                }
            });
        }

        function GenerateENGTableProject(projects) {
            let datas = [];
            if (table_project !== null)
                $('#table_project').DataTable().destroy();

            for (let i = 0; i < projects.length; i++) {              
                datas.push([
                    (i+1),
                    projects[i].job_id,
                    projects[i].customer_name,
                    projects[i].job_name,
                    projects[i].percent_eng_cost,
                    projects[i].percent_invoice,
                    parseInt(projects[i].remaining_amount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                ]);
            }

            table_project = $('#table_project').DataTable({
                data: datas,
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {
                        "targets": "_all", 
                        "className": "text-center",
                    }
                ],
                rowCallback: function (row, _data) {
                    let job_id = _data[1];
                    let data = projects.filter(f=>f.job_id == job_id).map(m=>m)[0];
                    let remaining_amount = data.remaining_amount;
                    if (remaining_amount == 0){
                        $(`td`,row).css({ "text-decoration": 'line-through'});
                        $(`td`,row).css({ "color": 'blue'});
                        $(`td:eq(4)`, row).text("finished");
                        $(`td:eq(5)`, row).text("finished");
                        $(`td:eq(6)`, row).text("finished");
                    }
                },
                searching: false,
                paging: false,
                info: false
            });
        };
        function GenerateCISTableProject(projects) {
            let datas = [];
            if (table_project !== null)
                $('#table_project').DataTable().destroy();

            for (let i = 0; i < projects.length; i++) {
                datas.push([
                    (i + 1),
                    projects[i].job_id,
                    projects[i].customer_name,
                    projects[i].job_name,
                    projects[i].percent_cis_cost,
                    projects[i].percent_invoice,
                    parseInt(projects[i].remaining_amount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                ]);
            }

            table_project = $('#table_project').DataTable({
                data: datas,
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {
                        "targets": "_all",
                        "className": "text-center",
                    }
                ],
                rowCallback: function (row, _data) {
                    let job_id = _data[1];
                    let data = projects.filter(f => f.job_id == job_id).map(m => m)[0];
                    let remaining_amount = data.remaining_amount;
                    if (remaining_amount == 0) {
                        $(`td`, row).css({ "text-decoration": 'line-through' });
                        $(`td`, row).css({ "color": 'blue' });
                        $(`td:eq(4)`, row).text("finished");
                        $(`td:eq(5)`, row).text("finished");
                        $(`td:eq(6)`, row).text("finished");
                    }
                },
                searching: false,
                paging: false,
                info: false
            });
        };
        function GenerateAISTableProject(projects) {
            let datas = [];
            if (table_project !== null)
                $('#table_project').DataTable().destroy();

            for (let i = 0; i < projects.length; i++) {
                datas.push([
                    (i + 1),
                    projects[i].job_id,
                    projects[i].customer_name,
                    projects[i].job_name,
                    projects[i].percent_ais_cost,
                    projects[i].percent_invoice,
                    parseInt(projects[i].remaining_amount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                ]);
            }

            table_project = $('#table_project').DataTable({
                data: datas,
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {
                        "targets": "_all",
                        "className": "text-center",
                    }
                ],
                rowCallback: function (row, _data) {
                    let job_id = _data[1];
                    let data = projects.filter(f => f.job_id == job_id).map(m => m)[0];
                    let remaining_amount = data.remaining_amount;
                    if (remaining_amount == 0) {
                        $(`td`, row).css({ "text-decoration": 'line-through' });
                        $(`td`, row).css({ "color": 'blue' });
                        $(`td:eq(4)`, row).text("finished");
                        $(`td:eq(5)`, row).text("finished");
                        $(`td:eq(6)`, row).text("finished");
                    }
                },
                searching: false,
                paging: false,
                info: false
            });
        };

        function GenerateENGTableService(services) {
            let datas = [];
            if (table_service !== null)
                $('#table_service').DataTable().destroy();

            for (let i = 0; i < services.length; i++) {              
                datas.push([
                    (i+1),
                    services[i].job_id,
                    services[i].customer_name,
                    services[i].job_name,
                    services[i].percent_eng_cost,
                    services[i].percent_invoice,
                    parseInt(services[i].remaining_amount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                ]);
            }

            table_service = $('#table_service').DataTable({
                data: datas,
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {
                        "targets": "_all", 
                        "className": "text-center",
                    }
                ],
                rowCallback: function (row, _data) {
                    let job_id = _data[1];
                    let data = services.filter(f=>f.job_id == job_id).map(m=>m)[0];
                    let remaining_amount = data.remaining_amount;
                    if (remaining_amount == 0){
                        $(`td`,row).css({ "text-decoration": 'line-through'});
                        $(`td`,row).css({ "color": 'blue'});
                        $(`td:eq(4)`, row).text("finished");
                        $(`td:eq(5)`, row).text("finished");
                        $(`td:eq(6)`, row).text("finished");
                    }
                },
                searching: false,
                paging: false,
                info: false
            });
        };
        function GenerateCISTableService(services) {
            let datas = [];
            if (table_service !== null)
                $('#table_service').DataTable().destroy();

            for (let i = 0; i < services.length; i++) {
                datas.push([
                    (i + 1),
                    services[i].job_id,
                    services[i].customer_name,
                    services[i].job_name,
                    services[i].percent_cis_cost,
                    services[i].percent_invoice,
                    parseInt(services[i].remaining_amount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                ]);
            }

            table_service = $('#table_service').DataTable({
                data: datas,
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {
                        "targets": "_all",
                        "className": "text-center",
                    }
                ],
                rowCallback: function (row, _data) {
                    let job_id = _data[1];
                    let data = services.filter(f => f.job_id == job_id).map(m => m)[0];
                    let remaining_amount = data.remaining_amount;
                    if (remaining_amount == 0) {
                        $(`td`, row).css({ "text-decoration": 'line-through' });
                        $(`td`, row).css({ "color": 'blue' });
                        $(`td:eq(4)`, row).text("finished");
                        $(`td:eq(5)`, row).text("finished");
                        $(`td:eq(6)`, row).text("finished");
                    }
                },
                searching: false,
                paging: false,
                info: false
            });
        };
        function GenerateAISTableService(services) {
            let datas = [];
            if (table_service !== null)
                $('#table_service').DataTable().destroy();

            for (let i = 0; i < services.length; i++) {
                datas.push([
                    (i + 1),
                    services[i].job_id,
                    services[i].customer_name,
                    services[i].job_name,
                    services[i].percent_ais_cost,
                    services[i].percent_invoice,
                    parseInt(services[i].remaining_amount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                ]);
            }

            table_service = $('#table_service').DataTable({
                data: datas,
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {
                        "targets": "_all",
                        "className": "text-center",
                    }
                ],
                rowCallback: function (row, _data) {
                    let job_id = _data[1];
                    let data = services.filter(f => f.job_id == job_id).map(m => m)[0];
                    let remaining_amount = data.remaining_amount;
                    if (remaining_amount == 0) {
                        $(`td`, row).css({ "text-decoration": 'line-through' });
                        $(`td`, row).css({ "color": 'blue' });
                        $(`td:eq(4)`, row).text("finished");
                        $(`td:eq(5)`, row).text("finished");
                        $(`td:eq(6)`, row).text("finished");
                    }
                },
                searching: false,
                paging: false,
                info: false
            });
        };

        $('#btnExport').on('click', function () {
            let year = $('#year :selected').text();
            let department = $('#departments :selected').text();
            location.href = '@Url.Action("ExportSummaryJobInHand", "JobInHand")?department=' + department + '&year=' + year;
        });
    </script>
}