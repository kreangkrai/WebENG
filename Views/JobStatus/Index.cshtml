@model WebENG.Models.UserModel;
@{
    ViewData["Title"] = "Job Status";
}
<style>

    .multiselect {
      width: 300px;
    }

    .selectBox {
      position: relative;
    }

    .selectBox select {
      width: 100%;
      font-weight: bold;
    }

    .overSelect {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
    }

    #checkboxes {
      display: none;
      border: 1px #dadada solid;
    }

    #checkboxes label {
      display: block;
    }

    #checkboxes label:hover {
      background-color: #1e90ff;
    }

    #checkcolumnboxes {
      display: none;
      border: 1px #dadada solid;
    }

    #checkcolumnboxes label {
      display: block;
    }

    #checkcolumnboxes label:hover {
      background-color: #1e90ff;
    }

    th,td {
        text-align:center;
    }
    table.dataTable th:nth-child(1),
    table.dataTable th:nth-child(2),
    table.dataTable th:nth-child(3),
    table.dataTable th:nth-child(4),
    table.dataTable th:nth-child(5),
    table.dataTable th:nth-child(6),
    table.dataTable th:nth-child(23),
    table.dataTable th:nth-child(24),
    table.dataTable th:nth-child(25),
    table.dataTable th:nth-child(26) {
        text-align: center;
        vertical-align: middle;
    }

    table.dataTable th:nth-child(1),
    table.dataTable th:nth-child(23),
    table.dataTable th:nth-child(24),
    table.dataTable th:nth-child(25),
    table.dataTable th:nth-child(26) {
        white-space: nowrap;
    }

    table.dataTable td:nth-child(1),
    table.dataTable td:nth-child(2),
    table.dataTable td:nth-child(3),
    table.dataTable td:nth-child(4),
    table.dataTable td:nth-child(5),
    table.dataTable td:nth-child(6){
        white-space: nowrap;
    }

    table.dataTable td:nth-child(8), th:nth-child(8),
    table.dataTable td:nth-child(9), th:nth-child(9),
    table.dataTable td:nth-child(10), th:nth-child(10),
    table.dataTable td:nth-child(11), th:nth-child(11),
    table.dataTable td:nth-child(12), th:nth-child(12),
    table.dataTable td:nth-child(13), th:nth-child(13),
    table.dataTable td:nth-child(14), th:nth-child(14),
    table.dataTable td:nth-child(15), th:nth-child(15),
    table.dataTable td:nth-child(16), th:nth-child(16),
    table.dataTable td:nth-child(17), th:nth-child(17),
    table.dataTable td:nth-child(18), th:nth-child(18),
    table.dataTable td:nth-child(19), th:nth-child(19),
    table.dataTable td:nth-child(20), th:nth-child(20),
    table.dataTable td:nth-child(21), th:nth-child(21),
    table.dataTable td:nth-child(22), th:nth-child(22) {
        width: 30px;
        max-width: 30px;
    }
</style>
<div class="row p-4" style="row-gap:20px">
    <div class="col-xl-12">
        <div class="card card-dark">
            <div class="card-header">
                <span class="card-title">Job Status</span>
            </div>
            <div class="card-body">
                <form>                   
                    <div class="form-group row" style="row-gap:20px">
                        @if (Model.role == "Admin")
                        {
                            <div class="col-xl-1">
                                <select id="departments" class="form-control"></select>
                            </div>
                            <div class="col-xl-3">
                                <select id="user_name" class="form-control">
                                    <option value="all" selected>ALL</option>
                                </select>
                            </div>
                        }
                        else
                        {
                            <div class="col-xl-3" hidden>
                                <select id="user_name" class="form-control">
                                    <option value="" selected disabled>Please Select User</option>
                                </select>
                            </div>
                        }
                        <div class="col-xl-1">
                            <button id="btn_load" type="button" class="btn btn-primary form-control elevation-1">
                                <i class="fas fa-sync"></i> Load
                            </button>
                        </div>
                        <div id="form_select_term_payment" class="col-xl-3" hidden>
                            <div class="multiselect">
                                <div class="selectBox" onclick="showCheckboxes()">
                                    <select class="form-control">
                                        <option>Select Term Payment</option>
                                    </select>
                                    <div class="overSelect"></div>
                                </div>
                                <div id="checkboxes">
                                </div>
                            </div>
                        </div>
                        <div id="form_select_column" class="col-xl-3" hidden>
                            <div class="multiselect">
                                <div class="selectBox" onclick="showColumnCheckboxes()">
                                    <select class="form-control">
                                        <option>Select Column</option>
                                    </select>
                                    <div class="overSelect"></div>
                                </div>
                                <div id="checkcolumnboxes">
                                </div>
                            </div>
                        </div>
                        <div id="form_export" class="col-xl-1 col-lg-1 col-md-1 pb-2" hidden>
                            <button id="btn_export" type="button" class="btn btn-success form-control elevation-1">
                                <i class="fas fa-file-excel"></i> Export
                            </button>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        <table id="table_job" class="table-bordered display compact stripe table-striped row-border order-column responsive" style="width:100%;font-size:14px">
                            <thead class="display compact" style="background-color:#429DD8">
                                <tr>
                                    <th>Job No.</th>
                                    <th>Project Name</th>
                                    <th>Customer</th>
                                    <th>Responsible</th>
                                    <th>% ENG Cost</th>
                                    <th>% CIS Cost</th>
                                    <th>% AIS Cost</th>
                                    <th>% Invoice</th>
                                    <th>Current Status</th>
                                    <th>Remaining</th>
                                    <th style="font-size:11px">Down Payment/KOM</th>
                                    <th style="font-size:11px">Document Submit</th>
                                    <th style="font-size:11px">Instrument to Vendor</th>
                                    <th style="font-size:11px">Instrument Delivered @@ CTL</th>
                                    <th style="font-size:11px">System Delivered @@ CTL</th>
                                    <th style="font-size:11px">FAT</th>
                                    <th style="font-size:11px">Delivery Instrument</th>
                                    <th style="font-size:11px">Delivery System</th>
                                    <th style="font-size:11px">Progress Work</th>
                                    <th style="font-size:11px">Installation work complete</th>
                                    <th style="font-size:11px">Commissioning</th>
                                    <th style="font-size:11px">Startup</th>
                                    <th style="font-size:11px">As-Built</th>
                                    <th style="font-size:11px">Warranty</th>
                                    <th style="font-size:11px">Finished</th>
                                    <th>Job ENG In Hand</th>
                                    <th>Job CIS In Hand</th>
                                    <th>Job AIS In Hand</th>
                                    <th>Job Total In Hand</th>
                                    <th>Total Invoice</th>
                                    <th>Due Date</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="modal_job" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" style="overflow-y:auto">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="modal_title" class="modal-title"><b>Job Status</b></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row">
                        <div class="col-4">
                            <label for="job_id">Job Number</label>
                            <input id="job_id" type="text" class="form-control" placeholder="" disabled/>
                        </div>
                        <div class="col-8">
                            <label for="job_name">Job Name</label>
                            <input id="job_name" type="text" class="form-control" placeholder="" disabled/>
                        </div>
                    </div>                                     
                    <div class="form-row pt-2">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header" style="background-color:#42D5D8">
                                    <span style="font-weight:bold">Term Payment</span>
                                </div>
                                <div class="card-body">
                                    <div class="form-row pt-1">
                                        <div class="col-12">
                                            <table id="table_payment" class="table table-sm table-bordered table-hover text-center table-striped nowrap w-100">
                                                <thead style="background-color:#42B4D8">
                                                    <tr>
                                                        <th>Milestone</th>
                                                        <th>%</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>                                           
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>                       
                    </div>
                    <div class="form-row">
                        <div class="col-4">
                            <label for="cost">Job In Hand</label>
                            <div class="input-group">
                                <input id="job_in_hand" type="number" class="form-control" placeholder="0" value="0" disabled/>
                                <div class="input-group-append">
                                    <span class="input-group-text">THB</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="cost">Invoice</label>
                            <div class="input-group">
                                <input id="invoice" type="number" class="form-control" placeholder="0" value="0" disabled />
                                <div class="input-group-append">
                                    <span class="input-group-text">THB</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="due_date">Due Date</label>
                            <input id="due_date"type="date"  class="form-control" value="1900-01-01" disabled/>
                        </div>
                    </div>
                    <div class="form-row" id="form_status">
                        <div class="col-5">
                            <label for="responsible">Project Status Update by</label>
                            <input id="responsible" class="form-control" disabled />
                        </div>
                        <div class="col-5">
                            <label for="status">Status</label>
                            <select id="status" class="form-control">
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="btn_save" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal_invoice" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" style="overflow-y:auto">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="modal_title" class="modal-title"><b>Invoices</b></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row pt-2">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header" style="background-color:#42D5D8">
                                    <span style="font-weight:bold">Invoice</span>                                
                                </div>
                                <div class="card-body">
                                    <div class="form-row pt-1">
                                        <div class="col-12">
                                            <table id="table_invoice" class="table table-sm table-bordered table-hover text-center table-striped nowrap w-100">
                                                <thead style="background-color:#42B4D8">
                                                    <tr>
                                                        <th>No</th>
                                                        <th>Invoice</th>
                                                        <th>Date</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>                                           
                                            </table>
                                        </div>
                                    </div>
                                    <div class="col-6 pt-1">
                                        <div class="row">
                                            <div class="col-2 pt-1">
                                                <label for="cost">รวม</label>
                                            </div>
                                            <div class="col-10">
                                                <div class="input-group">
                                                    <input id="sum_invoice" type="text" class="form-control" placeholder="0" value="0" />
                                                    <div class="input-group-append">
                                                        <span class="input-group-text">THB</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>                       
                    </div>                   
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalJobInfo" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="job_title"class="modal-title">Job Manpower Information</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body bg-dark">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12">
                            <div id="taskRatio" style="height:500px;width:100%"></div>
                        </div>
                        <div class="col-12">
                            <div style="height:500px;width:100%">
                                <canvas id="taskDistribution"></canvas>
                            </div>
                        </div>
                        <div class="col-12">
                            <div id="manpowerRatio" style="height:500px;width:100%"></div>
                        </div>
                        <div class="col-12">
                            <div style="height:500px;width:100%">
                                <canvas id="manpowerDistribution"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts
{  
    @*<script src="https://cdn.datatables.net/2.0.3/js/dataTables.js"></script>
    <script src="https://cdn.datatables.net/fixedcolumns/4.0.1/js/fixedColumns.dataTables.js"></script>
    <script src="https://cdn.datatables.net/fixedcolumns/4.0.1/js/dataTables.fixedColumns.js"></script>*@
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
         google.charts.load("current", {packages:["corechart"]});
         google.charts.setOnLoadCallback(GenerateChartTaskRatio);
         google.charts.setOnLoadCallback(GenerateChartManpowerRatio);
         let table;
         let table_invoice;
         let jobs_status = [];
         let set_payments = new Set();
         let set_column = new Set();
         let set_invoice = [];
         let trs = [];
         let mrs = [];

         let chartTaskRatio;
         let chartTaskDistribution;
         let chartManpowerRatio;
         let chartManpowerDistribution;

         let colors = ['#003f5c', '#444e86', '#955196', '#dd5182', '#ff6e54', '#ffa600', '#28cc9e', '#a6ed8e', '#ffdd83', '#e3f8ff','#912AB4','#D32D67','#3973DF','#298ED9','#73E5AE','#EFC67A','#CAEF7A','#485E1A','#93A6DA','#0B717A'];

        $(document).ready(async function () {
            await GetUsers();
            await GenerateUsers();
            await GetStatus();
            await GenerateStatusOption();
            await GenerateDepartmentOptions();
            let user = '@Model.user_id.ToLower()';
            $('#user_name').val(user);
        });

         async function GetStatus() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetStatus", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {  },
                success: function (response) {
                    statuses = response;
                }
            });
        };
        async function GenerateStatusOption() {
            let status = $('#status').val();
            $('#status').empty();
            for (let i = 0; i < statuses.length; i++) {
                if (statuses[i].status_name === status || status === "" || status === null) {
                    $('#status').append(`<option value="${statuses[i].status_id}">${statuses[i].status_id}: ${statuses[i].status_name}</option>`);
                }
            }
        }
         async function GetUsers() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetWorkingUser", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    users = response;
                }
            });
        }

        function GenerateUsers() {
            var user_string = '';
            let department = $('#departments :selected').text();
            $('#user_name').empty();
            $('#user_name').append('<option value="ALL">ALL</option>');
            let employees = users;
            if (department !== "ALL") {
                employees = users.filter(f => f.department === department);
            }
           
            for (var i = 0; i < employees.length; i++) {
                user_string += `<option value="${employees[i].user_id.toLowerCase()}">${employees[i].name}</option>`;
            }
            $('#user_name').append(user_string);
        }

        async function GetJobStatusByUser(user) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetJobStatusByUser", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user},
                success: function (response) {
                    jobs_status = response;
                    GenerateTable(jobs_status);
                }
            });
        }

        $('#btn_load').on('click',async function(){

            set_payments = new Set();
            for (let i =0;i<statuses.length;i++){
                set_payments.add(statuses[i].status_name);
            }
            set_column = new Set();
            set_column.add({ 'title': 'Job ENG In Hand', 'index': 25 });
            set_column.add({ 'title': 'Job CIS In Hand', 'index': 26 });
            set_column.add({ 'title': 'Job AIS In Hand', 'index': 27 });
            set_column.add({ 'title': 'Job Total In Hand', 'index': 28 });
            set_column.add({ 'title': 'Invoice', 'index': 29 });
            set_column.add({ 'title': 'Due Date', 'index': 30 });


            let user = $('#user_name').val();
            await GetJobStatusByUser(user);

            GenerateCheckBox();
            GenerateColumnCheckBox();
            $('#form_select_term_payment').attr('hidden',false);
            $('#form_select_column').attr('hidden',false);
            $('#form_export').attr('hidden',false);
        });

        function GenerateTable(jobs) {
            let datas = [];
            if (table !== null)
                $('#table_job').DataTable().destroy();
            let arr = Array.from(set_payments);
            let arr_column = Array.from(set_column);
            let new_jobs = [];
            let sum_invoice = 0;
            let columns = [];
            let _columns = [25,26,27,28,29,30];
            for (let i=0;i<_columns.length;i++){
                let b = arr_column.map(m=>m.index).find(a=> a == _columns[i]);
                if (!b){
                    columns.push(_columns[i]);
                }
            }
            columns.sort();
            for(let i=0;i<jobs.length;i++){
                for(let j=0;j<arr.length;j++){
                    if (jobs[i].status == arr[j]){
                        new_jobs.push(jobs[i]);
                        break;
                    }
                }
            }
            jobs = new_jobs;

            for (let i = 0; i < jobs.length; i++) {

                sum_invoice = 0;
                for(let j=0;j<jobs[i].invoices.length;j++){
                    sum_invoice += jobs[i].invoices[j].invoice;
                }

                let eng_cost = jobs[i].job_summary.eng_cost !== null ? jobs[i].job_summary.map(m => m.eng_cost)[0] : 0;
                let cis_cost = jobs[i].job_summary.cis_cost !== null ? jobs[i].job_summary.map(m => m.cis_cost)[0] : 0;
                let ais_cost = jobs[i].job_summary.ais_cost !== null ? jobs[i].job_summary.map(m => m.ais_cost)[0] : 0;
                let total_cost = jobs[i].job_summary.length > 0 ? jobs[i].job_summary.map(m => m.totalCost).reduce((acc, b) => acc + b) : 0;
                let percent_eng_cost = Math.ceil((Number(eng_cost) / Number(total_cost)) * 100);
                let percent_cis_cost = Math.ceil((Number(cis_cost) / Number(total_cost)) * 100);
                let percent_ais_cost = Math.ceil((Number(ais_cost) / Number(total_cost)) * 100);
                let percent_invoice = Math.ceil((Number(sum_invoice) / Number(jobs[i].job_in_hand)) * 100);
                let down_payment = jobs[i].term_payment.down_payment > 0 ? jobs[i].term_payment.down_payment : "";
                let document_submit = jobs[i].term_payment.document_submit > 0 ? jobs[i].term_payment.document_submit : "";
                let instrument_vendor = jobs[i].term_payment.instrument_vendor > 0 ? jobs[i].term_payment.instrument_vendor : "";
                let instrument_delivered_ctl = jobs[i].term_payment.instrument_delivered_ctl > 0 ? jobs[i].term_payment.instrument_delivered_ctl : "";
                let system_delivered_ctl = jobs[i].term_payment.system_delivered_ctl > 0 ? jobs[i].term_payment.system_delivered_ctl : "";
                let fat = jobs[i].term_payment.fat > 0 ? jobs[i].term_payment.fat : "";
                let delivery_instrument = jobs[i].term_payment.delivery_instrument > 0 ? jobs[i].term_payment.delivery_instrument : "";
                let delivery_system = jobs[i].term_payment.delivery_system > 0 ? jobs[i].term_payment.delivery_system : "";
                let progress_work = jobs[i].term_payment.progress_work > 0 ? jobs[i].term_payment.progress_work : "";
                let installation_work_complete = jobs[i].term_payment.installation_work_complete > 0 ? jobs[i].term_payment.installation_work_complete : "";
                let commissioning = jobs[i].term_payment.commissioning > 0 ? jobs[i].term_payment.commissioning : "";
                let startup = jobs[i].term_payment.startup > 0 ? jobs[i].term_payment.startup : "";
                let as_built = jobs[i].term_payment.as_built > 0 ? jobs[i].term_payment.as_built : "";
                let warranty = jobs[i].term_payment.warranty > 0 ? jobs[i].term_payment.warranty : "";
                let finished = jobs[i].term_payment.finished > 0 ? jobs[i].term_payment.finished : "";
                let job_in_hand = jobs[i].job_in_hand > 0 ? jobs[i].job_in_hand.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";
                let job_eng_in_hand = jobs[i].job_eng_in_hand > 0 ? jobs[i].job_eng_in_hand.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";
                let job_cis_in_hand = jobs[i].job_cis_in_hand > 0 ? jobs[i].job_cis_in_hand.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";
                let job_ais_in_hand = jobs[i].job_ais_in_hand > 0 ? jobs[i].job_ais_in_hand.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";
                let due_date = jobs[i].due_date.split('T')[0];
                let total_invoice = jobs[i].invoices.map(m => m.invoice).reduce((acc, b) => acc + b, 0);
                let remaining = (parseFloat(jobs[i].job_in_hand) - parseFloat(total_invoice)).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                
                console.log(jobs[i]);
                datas.push([
                    jobs[i].job_id,
                    jobs[i].job_name,
                    jobs[i].customer,
                    jobs[i].responsible,
                    percent_eng_cost,
                    percent_cis_cost,
                    percent_ais_cost,
                    percent_invoice,
                    jobs[i].status,
                    remaining,
                    down_payment,
                    document_submit,
                    instrument_vendor,
                    instrument_delivered_ctl,
                    system_delivered_ctl,
                    fat,
                    delivery_instrument,
                    delivery_system,
                    progress_work,
                    installation_work_complete,
                    commissioning,
                    startup,
                    as_built,
                    warranty,
                    finished,
                    job_eng_in_hand,
                    job_cis_in_hand,
                    job_ais_in_hand,
                    job_in_hand,
                    total_invoice,
                    due_date
                ]);
            }

            table = $('#table_job').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: {
                    leftColumns: 1,
                },
                columnDefs: [
                    {
                        targets: columns,
                        visible: false,
                    },
                ],
                rowCallback: function (row, _data) {
                    $('td:eq(1)', row).addClass("text-left");
                    $('td:eq(2)', row).addClass("text-left");
                    let job_id = _data[0];
                    let data = jobs.filter(f=>f.job_id == job_id).map(m=>m)[0];
                    let sum_invoice = 0;
                    for(let j=0;j<data.invoices.length;j++){
                        sum_invoice += data.invoices[j].invoice;
                    }
                    let percent = Math.ceil((Number(sum_invoice) / Number(data.job_in_hand)) * 100);
                    let current_status = statuses.filter(f=>f.status_name == data.status).map(m=>m.status_id)[0];
                    let due_date = data.due_date;

                    let payments = [];
                    let sum_percent = 0;
                    let start_column = 10;
                    let check_current_status = false;

                    let datas_percent = [];
                    datas_percent.push(data.term_payment.down_payment);
                    datas_percent.push(data.term_payment.document_submit);
                    datas_percent.push(data.term_payment.instrument_vendor);
                    datas_percent.push(data.term_payment.instrument_delivered_ctl);
                    datas_percent.push(data.term_payment.system_delivered_ctl);
                    datas_percent.push(data.term_payment.fat);
                    datas_percent.push(data.term_payment.delivery_instrument);
                    datas_percent.push(data.term_payment.delivery_system);
                    datas_percent.push(data.term_payment.progress_work);
                    datas_percent.push(data.term_payment.installation_work_complete);
                    datas_percent.push(data.term_payment.commissioning);
                    datas_percent.push(data.term_payment.startup);
                    datas_percent.push(data.term_payment.as_built);
                    datas_percent.push(data.term_payment.warranty);
                    datas_percent.push(data.term_payment.finished);
                    // Payment
                    for (let i =0;i<statuses.length;i++){
                        payments.push({'payment_id': statuses[i].status_id ,'payment_name': statuses[i].status_name, 'percent': datas_percent[i]});
                    }

                    // Count Project Name
                    let length_project_name = data.job_name.length;
                    if (Number(length_project_name) > 50){
                        $(`td:eq(1)`, row).css({ "font-size": '12px'});
                    }
                    //Highlight Due Date
                    let diff_day = Math.round(new Date(due_date).getTime() - new Date(Date.now()).getTime()) / (1000 * 3600 * 24);
                    if (data.status !== "Finished" && data.status !== "Warranty") {
                        if (diff_day <= 0 && diff_day > -10000){
                            $(`td:eq(0)`, row).css({ "color": 'red'});
                            $(`td:eq(1)`, row).css({ "color": 'red'});
                            $(`td:eq(2)`, row).css({ "color": 'red'});
                        }else{
                            if (diff_day > 0.0 && diff_day <= 30.0){
                                $(`td:eq(0)`, row).css({ "color": 'orange'});
                                $(`td:eq(1)`, row).css({ "color": 'orange'});
                                $(`td:eq(2)`, row).css({ "color": 'orange'});
                            }else if (diff_day > 30.0 && diff_day <= 60){
                                $(`td:eq(0)`, row).css({ "color": '#CACA04'});
                                $(`td:eq(1)`, row).css({ "color": '#CACA04'});
                                $(`td:eq(2)`, row).css({ "color": '#CACA04'});
                            }
                        }
                    }

                    for(let i=0;i<payments.length;i++){
                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#EFECE8'});
                        if (data.status === "Finished" || data.status === "Warranty"){
                                $(`td`,row).css({ "text-decoration": 'line-through'});
                                $(`td`,row).css({ "background-color": '#DEE6E5'});

                        }else{
                            if (payments[i].percent > 0){
                                sum_percent += Number(payments[i].percent);
                                if (current_status === payments[i].payment_id){
                                    if (percent >= sum_percent){
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#42CAD8'});
                                    }else{
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": 'orange'});
                                    }
                                    check_current_status = true;
                                    continue;
                                }

                                if (check_current_status){
                                    if (percent >= sum_percent){
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#42CAD8'});
                                    }
                                }else{
                                    if (percent >= sum_percent){
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#42D850'});
                                    }else{
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": 'red'});
                                    }
                                }
                            }else{
                                if (current_status === payments[i].payment_id){
                                    check_current_status = true;
                                }
                            }
                        }
                    }
                },
                scrollCollapse: true,
                scrollX: true,
                responsive: true
            });
        };

        function GenerateTableInvoice(invoices) {
            $('#sum_invoice').val(0);
            let datas = [];
            if (table_invoice !== null)
                $('#table_invoice').DataTable().destroy();

            for (let i = 0; i < invoices.length; i++) {
                let no = invoices[i].id;
                let invoice = invoices[i].invoice;
                let date = invoices[i].date;
                datas.push([
                    no,
                    invoice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    date.toString().split('T')[0]
                ]);
            }

            table_invoice = $('#table_invoice').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: {
                    left: 2
                },
                columnDefs: [
                    {

                    },
                ],
                rowCallback: function (row, data) {
                    let sum_invoice = set_invoice.map(m=>Number(m.invoice)).reduce((acc,curr)=> acc+curr);
                    $('#sum_invoice').val(sum_invoice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
                },
                searching: false,
                ordering: false,
                paging: false,
                info : false
            });
        };

        $('#table_job tbody').on('click', 'td','tr', async function () {
            let job_id = table.row(this).data()[0];
            let columnID = table.cell(this)[0][0].column;
            let column_name = $("tr").find(`th:eq(${columnID})`).html();
            if (column_name === "% Invoice"){
                let job = jobs_status.filter(f=>f.job_id == job_id).map(m=>m)[0];
                let list_invoice = job.invoices;
                set_invoice = [];
                for (let i=0;i<list_invoice.length;i++){
                    let invoice = list_invoice[i].invoice;
                    let date = list_invoice[i].invoice_date;
                    set_invoice.push({'id': (i+1) ,'invoice': invoice,'date': date});
                }
                GenerateTableInvoice(set_invoice);
                $('#modal_invoice').modal();
            }else if (column_name === "% Eng Cost"){
                ShowJobManpowerInfo(job_id);
            }else{
                let data = table.row(this).data();
                let job_id = data[0];
                let data_job = jobs_status.filter(f=>f.job_id == job_id).map(m=>m)[0];
                let status = statuses.filter(f=>f.status_name == data_job.status).map(m=>m.status_id)[0];
                let job_name = data_job.job_name;
                let job_in_hand = data_job.job_in_hand;
                let responsible = data_job.responsible;
                console.log(data_job);
                let invoice = 0;
                if (data_job.invoices.length > 0){
                    invoice = data_job.invoices.map(m=>m.invoice).reduce((acc,curr)=> acc+curr);
                }
                let due_date = data_job.due_date;

                let datas_percent = [];
                let down_payment = data_job.term_payment.down_payment;
                let document_submit = data_job.term_payment.document_submit;
                let instrument_vendor = data_job.term_payment.instrument_vendor;
                let instrument_delivered_ctl = data_job.term_payment.instrument_delivered_ctl;
                let system_delivered_ctl = data_job.term_payment.system_delivered_ctl;
                let fat = data_job.term_payment.fat;
                let delivery_instrument = data_job.term_payment.delivery_instrument;
                let delivery_system = data_job.term_payment.delivery_system;
                let progress_work = data_job.term_payment.progress_work;
                let installation_work_complete = data_job.term_payment.installation_work_complete;
                let commissioning = data_job.term_payment.commissioning;
                let startup = data_job.term_payment.startup;
                let as_built = data_job.term_payment.as_built;
                let warranty = data_job.term_payment.warranty;
                let finished = data_job.term_payment.finished;

                datas_percent.push(down_payment);
                datas_percent.push(document_submit);
                datas_percent.push(instrument_vendor);
                datas_percent.push(instrument_delivered_ctl);
                datas_percent.push(system_delivered_ctl);
                datas_percent.push(fat);
                datas_percent.push(delivery_instrument);
                datas_percent.push(delivery_system);
                datas_percent.push(progress_work);
                datas_percent.push(installation_work_complete);
                datas_percent.push(commissioning);
                datas_percent.push(startup);
                datas_percent.push(as_built);
                datas_percent.push(warranty);
                datas_percent.push(finished);

                let payments = [];
                let new_payments = [];

                for (let i =0;i<statuses.length;i++){
                    payments.push({'payment_id': statuses[i].status_id ,'payment_name': statuses[i].status_name, 'percent': datas_percent[i]});
                }

                for (let i=0;i<payments.length;i++){
                    if (payments[i].percent > 0){
                        new_payments.push(payments[i]);
                    }
                }
                payments = new_payments;

                $('#job_id').val(job_id);
                $('#job_name').val(job_name);
                $('#job_in_hand').val(job_in_hand);
                $('#invoice').val(invoice);
                $('#due_date').val(due_date.split('T')[0]);
                $('#responsible').val(responsible);
                $('#status').val(status);

                if (status === undefined){
                    $('#form_status').attr('hidden',true);
                }else{
                    $('#form_status').attr('hidden',false);
                }
                GenerateTablePayment(payments);

                $('#modal_job').modal();
            }
        });

       async function ShowJobManpowerInfo(jobId) {
            $('#modalJobInfo').modal();
            await GetTaskRatio(jobId);
            await GetTaskDistribution(jobId);
            await GetManpowerRatio(jobId);
            await GetManpowerDistribution(jobId);

            $('#job_title').html(`Job Manpower Information : ${jobId}`);
        }

        async function GetTaskRatio(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetTaskRatio", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    trs = response;
                    GenerateChartTaskRatio();
                }
            });
        }

        async function GetTaskDistribution(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetTaskDistribution", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    tds = response;
                    GenerateChartTaskDistribution();
                }
            });
        }

        async function GetManpowerRatio(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetManpowerRatio", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    mrs = response;
                    GenerateChartManpowerRatio();
                }
            });
        }

        async function GetManpowerDistribution(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetManpowerDistribution", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    mds = response;
                    GenerateChartManpowerDistribution();
                }
            });
        }

        function GenerateDepartmentOptions() {
            let departments = users.map(m => m.department);
            departments = [...new Set(departments)].sort();
            $('#departments').empty();
            $('#departments').append('<option value="" selected disabled>Dep.</option>');
            $('#departments').append('<option value="ALL">ALL</option>');
            for (let i = 0; i < departments.length; i++) {
                $('#departments').append(`<option value="${departments[i]}">${departments[i]}</option>`);
            }
        }

        $('#departments').on('change', function () {
            GenerateUsers();
        });

        @*function GenerateChartTaskRatio() {

            let trs_data = [];
            for (let i = 0; i < trs.length; i++) {
                trs_data.push(
                    {
                        y: trs[i].hours,
                        indexLabel: trs[i].percents.toFixed(2) + " % - " + trs[i].task_name,
                        indexLabelFontSize: 14,
                        indexLabelFontFamily: "san-seriff",
                        indexLabelFontColor: "white",
                        legendText: trs[i].task_name,
                    }
                );
            }

            chartTaskRatio = new CanvasJS.Chart("taskRatio",
                {
                    title: {
                        text: "Task Ratio",
                        fontSize: 18,
                        fontFamily: "san-seriff",
                        fontWeight: "bold",
                        fontColor: "white",
                    },
                    legend: {
                        fontSize: 14,
                        fontFamily: "san-seriff",
                        fontColor: "white",
                        fontWeight: "normal",
                    },
                    backgroundColor: "transparent",
                    data: [{
                        type: "doughnut",
                        radius: "100%",
                        startAngle: -90,
                        showInLegend: true,
                        toolTipContent: "{y} Hours - {legendText}",
                        legendText: "{legendText}",
                        dataPoints: trs_data,
                    }],
                }
            );
            chartTaskRatio.render();
        }*@

        function GenerateChartTaskRatio() {
            setTimeout(function(){
                let datas = [];
                datas.push(["Task","Hours"]);
                for(let i=0;i<trs.length;i++){
                    let name = trs[i].task_name;
                    datas.push([name , trs[i].hours]);
                }
                var data = google.visualization.arrayToDataTable(datas);

                var options = {
                  title: 'Task Ratio',
                  titleTextStyle:{color:'white',fontSize: 16},
                  pieHole: 0.65,
                  colors:colors,
                  pieSliceText:'percentage',
                  is3D:false,
                  backgroundColor:'#343A40',
                  legend:{position:'bottom',textStyle: {color: 'white', fontSize: 14}},
                  pieStartAngle:90,
                  pieSliceBorderColor:'#343A40',
                };

                var chart = new google.visualization.PieChart(document.getElementById('taskRatio'));
                chart.draw(data, options);
            },300);
        }
         function GenerateChartTaskDistribution() {
            let task_names = [];
            let hours = [];

            for (let i = 0; i < tds.length; i++) {
                task_names.push(tds[i].task_id + ' - ' + tds[i].task_name);
                hours.push(tds[i].hours);
            }

            if (chartTaskDistribution !== undefined) {
                chartTaskDistribution.destroy();
            }

            let ctx3 = document.getElementById('taskDistribution').getContext('2d');
            chartTaskDistribution = new Chart(ctx3, {
                type: 'bar',
                data: {
                    labels: task_names,
                    datasets: [
                        {
                            label: 'Hours',
                            data: hours,
                            backgroundColor: colors,
                            borderColor: colors,
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    indexAxis: 'y',
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)',
                            },
                            title: {
                                text: 'Hour(s)',
                                color: 'rgba(255,255,255,0.8)',
                                display: true
                            }
                        },
                        y: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)',
                                align: 'left',
                            },
                            title: {
                                text: 'Tasks',
                                color: 'rgba(255,255,255,0.8)',
                                display: true,
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: 'rgba(255,255,255,0.8)'
                            },
                            display: false
                        }
                    }
                }
            });
        }

        @*function GenerateChartManpowerRatio() {
            let mrs_data = [];
            for (let i = 0; i < mrs.length; i++) {
                mrs_data.push(
                    {
                        y: mrs[i].hours,
                        indexLabel: mrs[i].percents.toFixed(2) + " % - " + mrs[i].user_name,
                        indexLabelFontSize: 14,
                        indexLabelFontFamily: "san-seriff",
                        indexLabelFontColor: "white",
                        legendText: mrs[i].user_name,
                    }
                );
            }

            chartManpowerRatio = new CanvasJS.Chart("manpowerRatio",
                {
                    title: {
                        text: "Manpower Ratio",
                        fontSize: 18,
                        fontFamily: "san-seriff",
                        fontWeight: "bold",
                        fontColor: "white",
                    },
                    legend: {
                        fontSize: 14,
                        fontFamily: "san-seriff",
                        fontColor: "white",
                        fontWeight: "normal",
                    },
                    backgroundColor: "transparent",
                    data: [{
                        type: "doughnut",
                        radius: "100%",
                        startAngle: -90,
                        showInLegend: true,
                        toolTipContent: "{y} Hours - {legendText}",
                        legendText: "{legendText}",
                        dataPoints: mrs_data,
                    }],
                }
            );
            chartManpowerRatio.render();
        }*@

        function GenerateChartManpowerRatio() {
            setTimeout(function(){
                let datas = [];
                datas.push(["Name","Hours"]);
                for(let i=0;i<mrs.length;i++){
                    let name = mrs[i].user_name;
                    datas.push([name , mrs[i].hours]);
                }
                var data = google.visualization.arrayToDataTable(datas);

                var options = {
                  title: 'Manpower Ratio',
                  titleTextStyle:{color:'white',fontSize: 16},
                  pieHole: 0.65,
                  colors:colors,
                  pieSliceText:'percentage',
                  is3D:false,
                  backgroundColor:'#343A40',
                  legend:{position:'bottom',textStyle: {color: 'white', fontSize: 14}},
                  pieStartAngle:90,
                  pieSliceBorderColor:'#343A40',
                };

                var chart = new google.visualization.PieChart(document.getElementById('manpowerRatio'));
                chart.draw(data, options);
            },300);
        }

        function GenerateChartManpowerDistribution() {
            let users = mds.map(m => m.user_id);
            users = [...new Set(users)];

            let tasks = mds.map(m => m.task_id);
            tasks = [...new Set(tasks)];

            let hours = [];
            for (let i = 0; i < users.length; i++) {
                for (let j = 0; j < tasks.length; j++) {
                    let hrs = [];
                    hrs = mds.filter(f => f.user_id === users[i] && f.task_id === tasks[j]).map(m => m.hours);
                    if (hrs[0] === undefined) {
                        hrs[0] = 0;
                    }
                    hours.push([users[i], tasks[j], hrs[0]]);
                }
            }

            let ds = [];
            for (let i = 0; i < tasks.length; i++) {
                let hrs = [];
                hrs = hours.filter(f => f[1] === tasks[i]).map(m => m[2]);
                let tt = mds.filter(f => f.task_id === tasks[i]);
                ds.push({
                    label: tt[0].task_id + " - " + tt[0].task_name,
                    data: hrs,
                    backgroundColor: colors[i],
                    borderColor: colors[i],
                    borderWidth: 1
                });
            }

            if (chartManpowerDistribution !== undefined) {
                chartManpowerDistribution.destroy();
            }

            let ctx4 = document.getElementById('manpowerDistribution').getContext('2d');
            chartManpowerDistribution = new Chart(ctx4, {
                type: 'bar',
                data: {
                    labels: users,
                    datasets: ds
                },
                options: {
                    indexAxis: 'y',
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)'
                            },
                            title: {
                                text: 'Hour(s)',
                                color: 'rgba(255,255,255,0.8)',
                                display: true,
                            },
                            stacked: true
                        },
                        y: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)'
                            },
                            title: {
                                text: 'Name',
                                color: 'rgba(255,255,255,0.8)',
                                display: true,
                            },
                            stacked: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                color: 'rgba(255,255,255,0.8)'
                            }
                        }
                    }
                }
            });
        }

        function GenerateTablePayment(payments) {
            let datas = [];
            if (table_payment !== null)
                $('#table_payment').DataTable().destroy();

            for (let i = 0; i < payments.length; i++) {

                let payment = payments[i].payment_name;
                let percent = payments[i].percent;

                datas.push([
                    payment,
                    percent
                ]);
            }

            table_payment = $('#table_payment').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: {
                },
                columnDefs: [
                    {

                    },
                ],
                rowCallback: function (row, data) {

                },
                searching: false,
                ordering: false,
                paging: false,
                info : false
            });
        };

        $('#btn_save').on('click',async function(){
           let job = $('#job_id').val();
           let status = $('#status').val();

           await UpdateJobStatus(job,status);

        });

        async function UpdateJobStatus(job,status) {
            await $.ajax({
                type: "PATCH",
                url: '@Url.Action("UpdateJobStatus", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job,status
                },
                success: async function (response) {
                    if (response === "Success") {
                        let user = $('#user_name').val();
                        await GetJobStatusByUser(user);
                        $('#modal_job').modal('hide');
                    }
                    else {
                        alert(response);
                    }
                }
            });
        }


        var expanded = false;
        function showCheckboxes() {
          var checkboxes = document.getElementById("checkboxes");
          if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
          } else {
            checkboxes.style.display = "none";
            expanded = false;
          }
        }

        var expanded = false;
        function showColumnCheckboxes() {
          var checkboxes = document.getElementById("checkcolumnboxes");
          if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
          } else {
            checkboxes.style.display = "none";
            expanded = false;
          }
        }

        function CheckChange(status){
            let chk = $(`#${status}`).prop('checked');
            let value = $(`#${status}`).val();
            if (!chk){
                set_payments.delete(value);
            }else{
                set_payments.add(value);
            }

            GenerateTable(jobs_status);
        }

        function ColumnCheckChange(column){
            let chk = $(`#${column}`).prop('checked');
            let value = $(`#${column}`).val();
            console.log(value);
            if (!chk){
                set_column.forEach(x => x.title === value ? set_column.delete(x) : x)
            } else {
                if (value === "Job ENG In Hand") {
                    set_column.add({ 'title': 'Job ENG In Hand', 'index': 25 });
                }
                else if (value === "Job CIS In Hand") {
                    set_column.add({ 'title': 'Job CIS In Hand', 'index': 26 });
                }
                else if (value === "Job AIS In Hand") {
                    set_column.add({ 'title': 'Job AIS In Hand', 'index': 27 });
                }
                else if (value === "Job Total In Hand"){
                    set_column.add({'title':'Job Total In Hand','index':28});
                }else if (value === "Invoice"){
                    set_column.add({'title':'Invoice','index':29});
                }else if (value === "Due Date") {
                    set_column.add({'title':'Due Date','index':30});
                }
            }
            GenerateTable(jobs_status);
        }

        function GenerateColumnCheckBox(){
            $('#checkcolumnboxes').empty();
            let str = `<label for="COL25" class="form-check-label pl-2">
                           <input type="checkbox" id="COL25" value="Job ENG In Hand" onchange="ColumnCheckChange('COL25')" checked/> Job ENG In Hand</label>
                       <label for="COL26" class="form-check-label pl-2">
                           <input type="checkbox" id="COL26" value="Job CIS In Hand" onchange="ColumnCheckChange('COL26')" checked/> Job CIS In Hand</label>
                       <label for="COL27" class="form-check-label pl-2">
                           <input type="checkbox" id="COL27" value="Job AIS In Hand" onchange="ColumnCheckChange('COL27')" checked/> Job AIS In Hand</label>
                       <label for="COL28" class="form-check-label pl-2">
                           <input type="checkbox" id="COL28" value="Job Total In Hand" onchange="ColumnCheckChange('COL28')" checked/> Job Total In Hand</label>
                       <label for="COL29" class="form-check-label pl-2">
                           <input type="checkbox" id="COL29" value="Invoice" onchange="ColumnCheckChange('COL29')" checked/> Invoice</label>
                       <label for="COL30" class="form-check-label pl-2">
                           <input type="checkbox" id="COL30" value="Due Date" onchange="ColumnCheckChange('COL30')" checked/> Due Date</label>
`;
            $('#checkcolumnboxes').append(str);

        }

        function GenerateCheckBox(){
            $('#checkboxes').empty();
            let str = "";
            for (let i=0;i<statuses.length;i++){
                str += `<label for="${statuses[i].status_id}" class="form-check-label pl-2">
                                    <input type="checkbox" id="${statuses[i].status_id}" value="${statuses[i].status_name}" onchange="CheckChange('${statuses[i].status_id}')" checked/> ${statuses[i].status_name}</label>`;
            }
            $('#checkboxes').append(str);
        }

        $('#btn_export').on('click',function(){
            let user = $('#user_name').val();
            location.href = '@Url.Action("ExportData", "JobStatus")?user='+ user;
        });
    </script>
}