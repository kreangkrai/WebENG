@model WebENG.Models.UserModel;
@{
    ViewData["Title"] = "Job Status";
}
<style>

    .multiselect {
      width: 300px;
    }

    .selectBox {
      position: relative;
    }

    .selectBox select {
      width: 100%;
      font-weight: bold;
    }

    .overSelect {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
    }

    #checkboxes {
      display: none;
      border: 1px #dadada solid;
    }

    #checkboxes label {
      display: block;
    }

    #checkboxes label:hover {
      background-color: #1e90ff;
    }


    table.dataTable th:nth-child(1),
    table.dataTable th:nth-child(2),
    table.dataTable th:nth-child(3),
    table.dataTable th:nth-child(4),
    table.dataTable th:nth-child(5),
    table.dataTable th:nth-child(16),
    table.dataTable th:nth-child(17){
        text-align: center;
        vertical-align:middle;
    }

    table.dataTable th:nth-child(1),
    table.dataTable th:nth-child(16),
    table.dataTable th:nth-child(17){
        white-space: nowrap;
    }

    table.dataTable td:nth-child(1),
    table.dataTable td:nth-child(2),
    table.dataTable td:nth-child(3),
    table.dataTable td:nth-child(5){
        white-space: nowrap;
    }

    table.dataTable td:nth-child(6),th:nth-child(6),
    table.dataTable td:nth-child(7),th:nth-child(7),
    table.dataTable td:nth-child(8),th:nth-child(8),
    table.dataTable td:nth-child(9),th:nth-child(9),
    table.dataTable td:nth-child(10),th:nth-child(10),
    table.dataTable td:nth-child(11),th:nth-child(11),
    table.dataTable td:nth-child(12),th:nth-child(12),
    table.dataTable td:nth-child(13),th:nth-child(13),
    table.dataTable td:nth-child(14),th:nth-child(14),
    table.dataTable td:nth-child(15),th:nth-child(15){
      width: 30px;
      max-width: 30px;      
    }
</style>
<div class="row p-4" style="row-gap:20px">
    <div class="col-xl-12">
        <div class="card card-dark">
            <div class="card-header">
                <span class="card-title">Job Status</span>
            </div>
            <div class="card-body">
                <form>
                    <div class="form-group row" style="row-gap:20px">
                        @if (Model.role == "Admin")
                        {
                            <div class="col-xl-3">
                                <select id="user_name" class="form-control">
                                    <option value="" selected disabled>Please Select User</option>
                                </select>
                            </div>
                        }
                        else
                        {
                            <div class="col-xl-3" hidden>
                                <select id="user_name" class="form-control">
                                    <option value="" selected disabled>Please Select User</option>
                                </select>
                            </div>
                        }
                        <div class="col-xl-1">
                            <button id="btn_load" type="button" class="btn btn-primary form-control elevation-1">
                                <i class="fas fa-sync"></i> Load
                            </button>
                        </div>
                        <div id="form_select_term_payment"class="col-xl-3" hidden>
                              <div class="multiselect">
                                <div class="selectBox" onclick="showCheckboxes()">
                                  <select class="form-control">
                                    <option>Select Term Payment</option>
                                  </select>
                                  <div class="overSelect"></div>
                                </div>
                                <div id="checkboxes">
                                  
                                </div>
                              </div>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        <table id="table_job" class="table table-sm compact table-bordered table-hover responsive text-center w-100">
                            <thead style="background-color:#429DD8">
                                <tr>
                                    <th>Job No.</th>
                                    <th>Project Name</th>
                                    <th>Customer</th>
                                    <th>% Invoice</th>
                                    <th>Current Status</th>
                                    <th>Down Payment/KOM</th>
                                    <th>Document Submit</th>
                                    <th>Instrument Delivered @@ CTL</th>
                                    <th>System Delivered @@ CTL</th>
                                    <th>FAT</th>
                                    <th>Delivery Instrument</th>
                                    <th>Delivery System</th>
                                    <th>Progress Work</th>
                                    <th>Commissioning</th>
                                    <th>As-Built</th>
                                    <th>Job In Hand</th>
                                    <th>Total Invoice</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="modal_job" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" style="overflow-y:auto">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="modal_title" class="modal-title"><b>Job Status</b></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row">
                        <div class="col-4">
                            <label for="job_id">Job Number</label>
                            <input id="job_id" type="text" class="form-control" placeholder="" disabled/>
                        </div>
                        <div class="col-8">
                            <label for="job_name">Job Name</label>
                            <input id="job_name" type="text" class="form-control" placeholder="" disabled/>
                        </div>
                    </div>                                     
                    <div class="form-row pt-2">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header" style="background-color:#42D5D8">
                                    <span style="font-weight:bold">Term Payment</span>
                                </div>
                                <div class="card-body">
                                    <div class="form-row pt-1">
                                        <div class="col-12">
                                            <table id="table_payment" class="table table-sm table-bordered table-hover text-center table-striped nowrap w-100">
                                                <thead style="background-color:#42B4D8">
                                                    <tr>
                                                        <th>Milestone</th>
                                                        <th>%</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>                                           
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>                       
                    </div>
                    <div class="form-row">
                        <div class="col-4">
                            <label for="cost">Job In Hand</label>
                            <div class="input-group">
                                <input id="job_in_hand" type="number" class="form-control" placeholder="0" value="0" disabled/>
                                <div class="input-group-append">
                                    <span class="input-group-text">THB</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="cost">Invoice</label>
                            <div class="input-group">
                                <input id="invoice" type="number" class="form-control" placeholder="0" value="0" disabled />
                                <div class="input-group-append">
                                    <span class="input-group-text">THB</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="due_date">Due Date</label>
                            <input id="due_date"type="date"  class="form-control" value="1900-01-01" disabled/>
                        </div>
                    </div>
                    <div class="form-row" id="form_status">                       
                        <div class="col-5">
                            <label for="status">Status</label>
                            <select id="status" class="form-control">
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="btn_save" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script type="text/javascript">
         let table;
         let jobs_status = [];
         let set_payments = new Set();
         $(document).ready(async function (){            
             await GetUsers();
             await GenerateUsers();             
             await GetStatus();
             await GenerateStatusOption();
            
             let user = '@Model.user_id.ToLower()';
             $('#user_name').val(user);
         });

         async function GetStatus() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetStatus", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {  },
                success: function (response) {
                    statuses = response;
                }
            });
        };
        async function GenerateStatusOption() {
            let status = $('#status').val();
            $('#status').empty();
            for (let i = 0; i < statuses.length; i++) {
                if (statuses[i].status_name === status || status === "" || status === null) {
                    $('#status').append(`<option value="${statuses[i].status_id}">${statuses[i].status_id}: ${statuses[i].status_name}</option>`);
                }
            }
        }
         async function GetUsers() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetWorkingUser", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    users = response;
                }
            });
        }
        function GenerateUsers() {
            var user_string = '';
            $('#user_name').empty();
            for (var i = 0; i < users.length; i++) {
                user_string += `<option value="${users[i].user_id.toLowerCase()}">${users[i].name}</option>`;
            }          
            $('#user_name').append(user_string);
        }

        async function GetJobStatusByUser(user) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetJobStatusByUser", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { user},
                success: function (response) {
                    jobs_status = response;
                    GenerateTable(jobs_status);
                }
            });
        }

        $('#btn_load').on('click',async function(){
            set_payments = new Set();
            set_payments.add('Down Payment/KOM');
            set_payments.add('Document Submit');
            set_payments.add('Instrument Delivered @@ CTL');
            set_payments.add('System Delivered @@ CTL');
            set_payments.add('FAT');
            set_payments.add('Delivery Instrument');
            set_payments.add('Delivery System');
            set_payments.add('Progress Work');
            set_payments.add('Commissioning');
            set_payments.add('As-Built');
            set_payments.add('Finished');

            let user = $('#user_name').val();
            await GetJobStatusByUser(user);
            
            GenerateCheckBox();
            $('#form_select_term_payment').attr('hidden',false);
        });

        function GenerateTable(jobs) {
            let datas = [];
            if (table !== null)
                $('#table_job').DataTable().destroy();
            let arr = Array.from(set_payments);
            let new_jobs = [];

            for(let i=0;i<jobs.length;i++){
                for(let j=0;j<arr.length;j++){
                    if (jobs[i].status == arr[j]){
                        new_jobs.push(jobs[i]);
                        break;
                    }
                }               
            }
            jobs = new_jobs;

            for (let i = 0; i < jobs.length; i++) {
                
                let percent = Math.ceil((Number(jobs[i].invoice) / Number(jobs[i].job_in_hand)) * 100);
                let down_payment = jobs[i].down_payment > 0 ? jobs[i].down_payment : "";
                let document_submit = jobs[i].document_submit > 0 ? jobs[i].document_submit : "";
                let instrument_delivered_ctl = jobs[i].instrument_delivered_ctl > 0 ? jobs[i].instrument_delivered_ctl : "";
                let system_delivered_ctl = jobs[i].system_delivered_ctl > 0 ? jobs[i].system_delivered_ctl : "";
                let fat = jobs[i].fat > 0 ? jobs[i].fat : "";
                let delivery_instrument = jobs[i].delivery_instrument > 0 ? jobs[i].delivery_instrument : "";
                let delivery_system = jobs[i].delivery_system > 0 ? jobs[i].delivery_system : "";
                let progress_work = jobs[i].progress_work > 0 ? jobs[i].progress_work : "";
                let commissioning = jobs[i].commissioning > 0 ? jobs[i].commissioning : "";
                let as_built = jobs[i].as_built > 0 ? jobs[i].as_built : "";
                let job_in_hand = jobs[i].job_in_hand > 0 ? jobs[i].job_in_hand.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";
                let invoice = jobs[i].invoice > 0 ? jobs[i].invoice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";

                datas.push([
                    jobs[i].job_id,
                    jobs[i].job_name,
                    jobs[i].customer,
                    percent,
                    jobs[i].status,
                    down_payment,
                    document_submit,
                    instrument_delivered_ctl,
                    system_delivered_ctl,
                    fat,
                    delivery_instrument,
                    delivery_system,
                    progress_work,
                    commissioning,
                    as_built,
                    job_in_hand,
                    invoice,
                ]);
            }

            table = $('#table_job').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: true,
                columnDefs: [
                    {
                        width: 200, targets: 0
                    },
                ],
                rowCallback: function (row, _data) {
                    $('td:eq(1)', row).addClass("text-left");
                    $('td:eq(2)', row).addClass("text-left");
                    let job_id = _data[0];
                    let data = jobs.filter(f=>f.job_id == job_id).map(m=>m)[0];
                    let percent = Math.ceil((Number(data.invoice) / Number(data.job_in_hand)) * 100);
                    let current_status = statuses.filter(f=>f.status_name == data.status).map(m=>m.status_id)[0];

                    let payments = [];
                    let sum_percent = 0;
                    let start_column = 5;
                    let check_current_status = false;
                    payments.push({'payment_id': 'STA001' ,'payment_name': 'Down Payment/KOM', 'percent': data.down_payment});
                    payments.push({'payment_id': 'STA002' ,'payment_name': 'Document Submit', 'percent': data.document_submit});
                    payments.push({'payment_id': 'STA003' ,'payment_name': 'Instrument Delivered @@ CTL', 'percent': data.instrument_delivered_ctl});
                    payments.push({'payment_id': 'STA004' ,'payment_name': 'System Delivered @@ CTL', 'percent': data.system_delivered_ctl});
                    payments.push({'payment_id': 'STA005' ,'payment_name': 'FAT', 'percent': data.fat});
                    payments.push({'payment_id': 'STA006' ,'payment_name': 'Delivery Instrument', 'percent': data.delivery_instrument});
                    payments.push({'payment_id': 'STA007' ,'payment_name': 'Delivery System', 'percent': data.delivery_system});
                    payments.push({'payment_id': 'STA008' ,'payment_name': 'Progress Work', 'percent': data.progress_work});
                    payments.push({'payment_id': 'STA009' ,'payment_name': 'Commissioning', 'percent': data.commissioning});
                    payments.push({'payment_id': 'STA010' ,'payment_name': 'As-Built', 'percent': data.as_built});

                    for(let i=0;i<payments.length;i++){
                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#EFECE8'});
                        if (current_status === undefined){
                                $(`td`,row).css({ "text-decoration": 'line-through'});
                                $(`td`,row).css({ "background-color": '#DEE6E5'});
                                
                        }else{
                            if (payments[i].percent > 0){                          
                                sum_percent += Number(payments[i].percent);
                                if (current_status === payments[i].payment_id){                          
                                    if (percent > sum_percent){
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#42CAD8'});
                                    }else{
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": 'orange'});
                                    }
                                    check_current_status = true;
                                    continue;
                                }

                                if (check_current_status){
                                    if (percent >= sum_percent){
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#42CAD8'});
                                    }
                                }else{
                                    if (percent >= sum_percent){
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": '#42D850'});
                                    }else{
                                        $(`td:eq(${start_column + i})`, row).css({ "background-color": 'red'});
                                    }
                                }
                            }else{
                                if (current_status === payments[i].payment_id){
                                    check_current_status = true;
                                }
                            }
                        }
                    }
                },
                scrollCollapse: true,
                scrollX: true,
            });
        };

        $('#table_job tbody').on('click', 'tr', async function () {
            let data = table.row(this).data();
            let job_id = data[0];
            
            let data_job = jobs_status.filter(f=>f.job_id == job_id).map(m=>m)[0];
            let status = statuses.filter(f=>f.status_name == data_job.status).map(m=>m.status_id)[0];
            let job_name = data_job.job_name;
            let job_in_hand = data_job.job_in_hand;
            let invoice = data_job.invoice;
            let due_date = data_job.due_date;

            let down_payment = data_job.down_payment;
            let document_submit = data_job.document_submit;
            let instrument_delivered_ctl = data_job.instrument_delivered_ctl;
            let system_delivered_ctl = data_job.system_delivered_ctl;
            let fat = data_job.fat;
            let delivery_instrument = data_job.delivery_instrument;
            let delivery_system = data_job.delivery_system;
            let progress_work = data_job.progress_work;
            let commissioning = data_job.commissioning;
            let as_built = data_job.as_built;

            let payments = [];
            let new_payments = [];
            payments.push({'payment_id': 'STA001' ,'payment_name': 'Down Payment/KOM', 'percent': down_payment});
            payments.push({'payment_id': 'STA002' ,'payment_name': 'Document Submit', 'percent': document_submit});
            payments.push({'payment_id': 'STA003' ,'payment_name': 'Instrument Delivered @@ CTL', 'percent': instrument_delivered_ctl});
            payments.push({'payment_id': 'STA004' ,'payment_name': 'System Delivered @@ CTL', 'percent': system_delivered_ctl});
            payments.push({'payment_id': 'STA005' ,'payment_name': 'FAT', 'percent': fat});
            payments.push({'payment_id': 'STA006' ,'payment_name': 'Delivery Instrument', 'percent': delivery_instrument});
            payments.push({'payment_id': 'STA007' ,'payment_name': 'Delivery System', 'percent': delivery_system});
            payments.push({'payment_id': 'STA008' ,'payment_name': 'Progress Work', 'percent': progress_work});
            payments.push({'payment_id': 'STA009' ,'payment_name': 'Commissioning', 'percent': commissioning});
            payments.push({'payment_id': 'STA010' ,'payment_name': 'As-Built', 'percent': as_built});
           
            for (let i=0;i<payments.length;i++){
                if (payments[i].percent > 0){
                    new_payments.push(payments[i]);
                }
            }
            payments = new_payments;

            $('#job_id').val(job_id);
            $('#job_name').val(job_name);
            $('#job_in_hand').val(job_in_hand);
            $('#invoice').val(invoice);
            $('#due_date').val(due_date.split('T')[0]);
            $('#status').val(status);

            if (status === undefined){
                $('#form_status').attr('hidden',true);
            }else{
                $('#form_status').attr('hidden',false);
            }
            GenerateTablePayment(payments);

            $('#modal_job').modal();
        });

        function GenerateTablePayment(payments) {
            let datas = [];
            if (table_payment !== null)
                $('#table_payment').DataTable().destroy();

            for (let i = 0; i < payments.length; i++) {
                
                let payment = payments[i].payment_name;
                let percent = payments[i].percent;
             
                datas.push([
                    payment,
                    percent
                ]);
            }

            table_payment = $('#table_payment').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: {
                    left: 2
                },
                columnDefs: [
                    {
                        
                    },
                ],
                rowCallback: function (row, data) {
                    
                },
                searching: false,
                ordering: false,
                paging: false,
                info : false
            });
        };

        $('#btn_save').on('click',async function(){
           let job = $('#job_id').val();
           let status = $('#status').val();

           await UpdateJobStatus(job,status);

        });

        async function UpdateJobStatus(job,status) {
            await $.ajax({
                type: "PATCH",
                url: '@Url.Action("UpdateJobStatus", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job,status
                },
                success: async function (response) {
                    if (response === "Success") {
                        let user = $('#user_name').val();
                        await GetJobStatusByUser(user);
                        $('#modal_job').modal('hide');
                    }
                    else {
                        alert(response);
                    }
                }
            });
        }


        var expanded = false;
        function showCheckboxes() {
          var checkboxes = document.getElementById("checkboxes");            
          if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
          } else {
            checkboxes.style.display = "none";
            expanded = false;
          }
        }
        function CheckChange(status){
            let chk = $(`#${status}`).prop('checked');
            let value = $(`#${status}`).val();
            if (!chk){
                set_payments.delete(value);
            }else{
                set_payments.add(value);
            }

            GenerateTable(jobs_status);
        }

        function GenerateCheckBox(){
            $('#checkboxes').empty();
            let str = `<label for="STA001" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA001" value="Down Payment/KOM" onchange="CheckChange('STA001')" checked/> Down Payment/KOM</label>
                                  <label for="STA002" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA002" value="Document Submit" onchange="CheckChange('STA002')" checked/> Document Submit</label>
                                  <label for="STA003" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA003" value="Instrument Delivered @@ CTL" onchange="CheckChange('STA003')" checked/> Instrument Delivered @@ CTL</label>
                                  <label for="STA004" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA004" value="System Delivered @@ CTL" onchange="CheckChange('STA004')" checked/> System Delivered @@ CTL</label>
                                  <label for="STA005" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA005" value="FAT" onchange="CheckChange('STA005')" checked/> FAT</label>
                                  <label for="STA006" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA006" value="Delivery Instrument" onchange="CheckChange('STA006')" checked/> Delivery Instrument</label>
                                  <label for="STA007" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA007" value="Delivery System" onchange="CheckChange('STA007')" checked/> Delivery System</label>
                                  <label for="STA008" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA008" value="Progress Work" onchange="CheckChange('STA008')" checked/> Progress Work</label>
                                  <label for="STA009" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA009" value="Commissioning" onchange="CheckChange('STA009')" checked/> Commissioning</label>
                                  <label for="STA010" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA010" value="As-Built" onchange="CheckChange('STA010')" checked/> As-Built</label>
                                  <label for="STA999" class="form-check-label pl-2">
                                    <input type="checkbox" id="STA999" value="Finished" onchange="CheckChange('STA999')" checked/> Finished</label>`;
            $('#checkboxes').append(str);
           
        }
    </script>
}