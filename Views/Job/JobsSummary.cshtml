@{
    ViewData["title"] = "Jobs Summary";
}
<style>
    #tableJobs {
        cursor:pointer;
    }
</style>

<div class="row p-4" style="row-gap:5px">
    <div class="col-xl-12">
        <div class="card card-dark">
            <div class="card-header">
                <span>Jobs Summary</span>
            </div>
            <div class="card-body" style="overflow-x:auto">
                <table id="tableJobs" class="table table-bordered table-hover table-sm text-center w-100">
                    <thead>
                        <tr>
                            <th>Job ID</th>
                            <th>Job Name</th>
                            <th>Customer</th>
                            <th>Responsible</th>
                            <th>ENG Cost</th>
                            <th>CIS Cost</th>
                            <th>AIS Cost</th>
                            <th>Total Cost</th>
                            <th>Factor</th>
                            <th>Total Manhours</th>
                            <th>Remaining Cost</th>
                            <th>Total Manhours With OT</th>
                            <th>Remaining Cost With OT </th>
                            <th>Process</th>
                            <th>System</th>
                            <th>Job Status</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Job ID</th>
                            <th>Job Name</th>
                            <th>Customer</th>
                            <th>Responsible</th>
                            <th>ENG Cost</th>
                            <th>CIS Cost</th>
                            <th>AIS Cost</th>
                            <th>Total Cost</th>
                            <th>Factor</th>
                            <th>Total Manhours</th>
                            <th>Remaining Cost</th>
                            <th>Total Manhours With OT</th>
                            <th>Remaining Cost With OT </th>
                            <th>Process</th>
                            <th>System</th>
                            <th>Job Status</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalJobInfo" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Job Manpower Information</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body bg-dark">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12">
                            <div id="taskRatio" style="height:500px;width:100%"></div>
                        </div>
                        <div class="col-12">
                            <div style="height:500px;width:100%">
                                <canvas id="taskDistribution"></canvas>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <div id="manpowerRatio" style="height:500px;width:100%"></div>
                            </div>
                            <div class="col-6">
                                <div id="manpowerOTRatio" style="height:500px;width:100%"></div>
                            </div>
                        </div>
                        
                        <div class="col-12">
                            <div style="height:500px;width:100%">
                                <canvas id="manpowerDistribution"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal_job" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" style="overflow-y:auto">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="modal_title" class="modal-title"><b>Edit Process , System</b></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row">
                        <div class="col-4">
                            <label for="job_id">Job Number</label>
                            <input id="job_id" type="text" class="form-control" placeholder="JYYXXXX" disabled />
                        </div>
                        <div class="col-8">
                            <label for="job_name">Job Name</label>
                            <input id="job_name" type="text" class="form-control" placeholder="" disabled />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-8">
                            <label for="job_customer">Customer</label>
                            <input id="job_customer" type="text" class="form-control" placeholder="" disabled />
                        </div>
                        <div class="col-4">
                            <label for="job_total_cost">Total Cost</label>
                            <input id="job_total_cost" type="text" class="form-control" placeholder="" disabled />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-4">
                            <label for="job_eng_cost">ENG Cost</label>
                            <input id="job_eng_cost" type="text" class="form-control" placeholder="" disabled />
                        </div>
                        <div class="col-4">
                            <label for="job_cis_cost">CIS Cost</label>
                            <input id="job_cis_cost" type="text" class="form-control" placeholder="" disabled />
                        </div>
                        <div class="col-4">
                            <label for="job_ais_cost">AIS Cost</label>
                            <input id="job_ais_cost" type="text" class="form-control" placeholder="" disabled />
                        </div>
                    </div>
                    <div class="form-row pt-2">
                        <div class="col-6">
                            <div class="card">
                                <div class="card-header" style="background-color:#42D5D8">
                                    <span style="font-weight:bold;">Process</span>
                                </div>
                                <div class="card-body">
                                    <div class="form-row">
                                        <div class="col-9">
                                            <label for="select_process">Process</label>
                                            <select id="select_process" class="form-control">
                                            </select>
                                        </div>
                                        <div class="col-3">
                                            <label for="add_process">Add</label>
                                            <button id="add_process" type="button" class="btn btn-primary form-control elevation-1" disabled>
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="form-row pt-1">
                                        <div class="col-12">
                                            <table id="table_process" class="table table-sm table-bordered table-hover text-center table-striped nowrap w-100">
                                                <thead style="background-color:#42B4D8">
                                                    <tr>
                                                        <th>Process</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card">
                                <div class="card-header" style="background-color:#42D5D8">
                                    <span style="font-weight:bold">System</span>
                                </div>
                                <div class="card-body">
                                    <div class="form-row">
                                        <div class="col-9">
                                            <label for="select_system">System</label>
                                            <select id="select_system" class="form-control">
                                            </select>
                                        </div>
                                        <div class="col-3">
                                            <label for="add_system">Add</label>
                                            <button id="add_system" type="button" class="btn btn-primary form-control elevation-1" disabled>
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="form-row pt-1">
                                        <div class="col-12">
                                            <table id="table_system" class="table table-sm table-bordered table-hover text-center table-striped nowrap w-100">
                                                <thead style="background-color:#42B4D8">
                                                    <tr>
                                                        <th>System</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-2">
                            <label for="job_total_man_hours">Total Man Hours</label>
                            <input id="job_total_man_hours" class="form-control" disabled />
                        </div>
                        <div class="col-2">
                            <label for="job_remain_cost">Remain Cost</label>
                            <input id="job_remain_cost" class="form-control" disabled />
                        </div>
                        <div class="col-5">
                            <label for="job_responsible">Project Status Update by</label>
                            <input id="job_responsible" class="form-control" disabled />
                        </div>
                        <div class="col-3">
                            <label for="job_status">Status</label>
                            <input id="job_status" class="form-control" disabled />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="btn_save" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal_edit_process" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="modal_title" class="modal-title"><b>Edit Process</b></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row">
                        <div class="col-12">
                            <label for="edit_process_name">Process</label>
                            <input id="edit_process_name" type="text" class="form-control" placeholder="" disabled/>
                        </div>
                    </div>                                       
                </form>
            </div>
            <div class="modal-footer">
                <button id="btn_process_delete" type="button" class="btn btn-danger mr-auto elevation-1">
                    <i class="fas fa-trash-alt"></i> Delete
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal_edit_system" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="modal_title" class="modal-title"><b>Edit System</b></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row">
                        <div class="col-12">
                            <label for="edit_system_name">System</label>
                            <input id="edit_system_name" type="text" class="form-control" placeholder="" disabled/>
                        </div>
                    </div>                                       
                </form>
            </div>
            <div class="modal-footer">
                <button id="btn_system_delete" type="button" class="btn btn-danger mr-auto elevation-1">
                    <i class="fas fa-trash-alt"></i> Delete
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
         google.charts.load("current", {packages:["corechart"]});
         google.charts.setOnLoadCallback(GenerateChartTaskRatio);
        google.charts.setOnLoadCallback(GenerateChartManpowerRatio);
        google.charts.setOnLoadCallback(GenerateChartManpowerOTRatio);
        let processes = [];
        let systems = [];
        let set_processes = [];
        let set_systems = [];
        let jobsSummary = [];

        let statuses = [];
        let table;
        let trs = [];
        let tds = [];
        let mrs = [];
        let mrs_ot = [];
        let mds = [];
        let chartTaskRatio;
        let chartTaskDistribution;
        let chartManpowerRatio;
        let chartManpowerDistribution;
        let colors = ['#003f5c', '#444e86', '#955196', '#dd5182', '#ff6e54', '#ffa600', '#28cc9e', '#a6ed8e', '#ffdd83', '#e3f8ff','#912AB4','#D32D67','#3973DF','#298ED9','#73E5AE','#EFC67A','#CAEF7A','#485E1A','#93A6DA','#0B717A'];

        $(document).ready(async function () {

            await GetStatus();
            await GenerateStatusOption();
            await GetProcess();
            await GetSystem();
            await GenerateProcessOption();
            await GenerateSystemOption();
            GenerateTable(await GetJobsSummary());
        });
        async function GetStatus() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetStatus", "Job")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {  },
                success: function (response) {
                    statuses = response;
                }
            });
        };

        function GenerateStatusOption() {
            let status = $('#status').val();
            $('#status').empty();
            $('#status').append(`<option value="" selected disabled>Please Select Status</option>`);
            for (let i = 0; i < statuses.length; i++) {
                if (statuses[i].status_name === status || status === "" || status === null) {
                    $('#status').append(`<option value="${statuses[i].status_id}">${statuses[i].status_id}: ${statuses[i].status_name}</option>`);
                }
            }
        }

        async function GetProcess() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetProcesses", "EngProcess")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    processes = response;
                }
            });
        }
        async function GetSystem() {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetSystems", "EngSystem")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    systems = response;
                }
            });
        }

        function GenerateProcessOption() {
            let process = $('#select_process').val();
            $('#select_process').empty();
            $('#select_process').append(`<option value="" selected disabled>Please Select Process</option>`);
            for (let i = 0; i < processes.length; i++) {
                if (processes[i].process_name === process || process === "" || process === null) {
                    $('#select_process').append(`<option value="${processes[i].process_id}">${processes[i].process_id}: ${processes[i].process_name}</option>`);
                }
            }
        }

        function GenerateSystemOption() {
            let system = $('#select_system').val();
            $('#select_system').empty();
            $('#select_system').append(`<option value="" selected disabled>Please Select System</option>`);
            for (let i = 0; i < systems.length; i++) {
                if (systems[i].system_name === system || system === "" || system === null) {
                    $('#select_system').append(`<option value="${systems[i].system_id}">${systems[i].system_id}: ${systems[i].system_name}</option>`);
                }
            }
        }

        async function GetJobsSummary() {
            jobsSummary = [];
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetJobsSummary", "Job")',
	            contentType: 'application/x-www-form-urlencoded',
                data: { },
                success: function (response) {
                    jobsSummary = response;
                }
            });
            return jobsSummary;
        }

        function GenerateTable(jobsSummary) {
            let datas = [];

            for (let i = 0; i < jobsSummary.length; i++) {
                let total_cost = jobsSummary[i].eng_cost + jobsSummary[i].cis_cost + jobsSummary[i].ais_cost;
                datas.push([
                    jobsSummary[i].jobId,
                    jobsSummary[i].jobName,
                    jobsSummary[i].customer,
                    jobsSummary[i].responsible,
                    jobsSummary[i].eng_cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    jobsSummary[i].cis_cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    jobsSummary[i].ais_cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    total_cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    jobsSummary[i].factor,
                    jobsSummary[i].totalManhour.toFixed(2),
                    jobsSummary[i].remainingCost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    jobsSummary[i].totalOTManhour.toFixed(2),
                    jobsSummary[i].remainingOTCost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                    jobsSummary[i].process,
                    jobsSummary[i].system,
                    jobsSummary[i].status
                ]);
            }

            if (table !== undefined) {
                table.destroy();
            }

            table = $('#tableJobs').DataTable({
                data: datas,
                columnDefs: [
                    {
                        targets: [1,2],
                        className: "text-left"
                    },
                ],
                paging: false,
                rowCallback: function (row, data) {
                    let code_status = data[15];
                    let status = statuses.filter(f=>f.status_id === code_status).map(m=>m.status_name);
                    let status_str =  '';
                    if(code_status === "STA999"){
                        status_str = `<span class="badge badge-success">${status}</span>`;
                    }else{
                        status_str = `<span class="badge badge-warning">${status}</span>`;
                    }

                    $('td:eq(15)', row).html(status_str);
                }
            });
        }

        $('#tableJobs').on('click', 'td', function () {
            let columnID = table.cell(this)[0][0].column;
            let jobId = table.row(this).data()[0];
            let admin = '@Model.role' == "Admin" ? true : false;

            //Column Total Manhours
            if (columnID === 9 && admin) {
                ShowJobManpowerInfo(jobId);
            }else{
                EditJob(table.row(this).data());
                $('#modal_job').modal();
            }
        });

        function EditJob(data) {
            set_processes = [];
            set_systems = [];

            let job_id = data[0];
            let job = jobsSummary.filter(f=>f.jobId == job_id).map(m=>m)[0];
            let job_name = job.jobName;
            let quotation_no = job.quotation_no;
            let customer = job.customer;
            let responsible = job.responsible;
            let eng_cost = job.eng_cost.toString().replaceAll(",", "");
            let cis_cost = job.cis_cost.toString().replaceAll(",", "");
            let ais_cost = job.ais_cost.toString().replaceAll(",", "");
            let total_cost = (job.eng_cost + job.cis_cost + job.ais_cost).toString().replaceAll(",", "");
            let status = statuses.filter(f=>f.status_id == job.status).map(m=>m.status_name)[0];
            let total_man_hours = job.totalManhour.toFixed(2);
            let remain_cost = job.remainingCost;
            let list_process = [];

            let countProcess = (job.process.match(/,/g) || []).length;

            for (let k=0;k<=countProcess;k++){
                let _process = processes.filter(f=>f.process_id == job.process.split(',')[k]).map(m=>m.process_name)[0];
                if (_process !== undefined){
                    list_process.push(_process);
                }
            }

            let list_system = [];
            let countSystem = (job.system.match(/,/g) || []).length;
            for (let k=0;k<=countSystem;k++){
                let _system = systems.filter(f=>f.system_id == job.system.split(',')[k]).map(m=>m.system_name)[0];
                if (_system !== undefined){
                    list_system.push(_system);
                }
            }

            $('#job_id').val(job_id);
            $('#job_name').val(job_name);
            $('#job_quotation_no').val(quotation_no);
            $('#job_eng_cost').val(eng_cost);
            $('#job_cis_cost').val(cis_cost);
            $('#job_ais_cost').val(ais_cost);
            $('#job_total_cost').val(total_cost);
            $('#job_customer').val(customer);
            $('#job_responsible').val(responsible);
            $('#job_status').val(status);
            $('#job_total_man_hours').val(total_man_hours);
            $('#job_remain_cost').val(remain_cost);
            //Process
            for (let i=0;i<list_process.length;i++){
                let process_id = processes.filter(f=>f.process_name == list_process[i] ).map(m=>m.process_id)[0];
                set_processes.push({'process_id': process_id ,'process_name': list_process[i]});
            }

            //System
            for (let i=0;i<list_system.length;i++){
                let system_id = systems.filter(f=>f.system_name == list_system[i] ).map(m=>m.system_id)[0];
                set_systems.push({'system_id': system_id ,'system_name': list_system[i]});
            }

            GenerateTableProcess(set_processes);
            GenerateTableSystem(set_systems);
        }
        async function ShowJobManpowerInfo(jobId) {
            $('#modalJobInfo').modal();
            await GetTaskRatio(jobId);
            await GetTaskDistribution(jobId);
            await GetManpowerRatio(jobId);
            await GetManpowerOTRatio(jobId);
            await GetManpowerDistribution(jobId);
        }

        async function GetTaskRatio(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetTaskRatio", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    trs = response;
                    GenerateChartTaskRatio();
                }
            });
        }

        @*function GenerateChartTaskRatio() {

            let trs_data = [];
            for (let i = 0; i < trs.length; i++) {
                trs_data.push(
                    {
                        y: trs[i].hours,
                        indexLabel: trs[i].percents.toFixed(2) + " % - " + trs[i].task_name,
                        indexLabelFontSize: 14,
                        indexLabelFontFamily: "san-seriff",
                        indexLabelFontColor: "white",
                        legendText: trs[i].task_name,
                    }
                );
            }

            chartTaskRatio = new CanvasJS.Chart("taskRatio",
                {
                    title: {
                        text: "Task Ratio",
                        fontSize: 18,
                        fontFamily: "san-seriff",
                        fontWeight: "bold",
                        fontColor: "white",
                    },
                    legend: {
                        fontSize: 14,
                        fontFamily: "san-seriff",
                        fontColor: "white",
                        fontWeight: "normal",
                    },
                    backgroundColor: "transparent",
                    data: [{
                        type: "doughnut",
                        radius: "100%",
                        startAngle: -90,
                        showInLegend: true,
                        toolTipContent: "{y} Hours - {legendText}",
                        legendText: "{legendText}",
                        dataPoints: trs_data,
                    }],
                }
            );
            chartTaskRatio.render();
        }*@

        function GenerateChartTaskRatio() {
            setTimeout(function(){
                let datas = [];
                datas.push(["Task","Hours"]);
                for(let i=0;i<trs.length;i++){
                    let name = trs[i].task_name;
                    datas.push([name , trs[i].hours]);
                }
                var data = google.visualization.arrayToDataTable(datas);

                var options = {
                  title: 'Task Ratio',
                  titleTextStyle:{color:'white',fontSize: 16},
                  pieHole: 0.65,
                  colors:colors,
                  pieSliceText:'percentage',
                  is3D:false,
                  backgroundColor:'#343A40',
                  legend:{position:'bottom',textStyle: {color: 'white', fontSize: 14}},
                  pieStartAngle:90,
                  pieSliceBorderColor:'#343A40',
                };

                var chart = new google.visualization.PieChart(document.getElementById('taskRatio'));
                chart.draw(data, options);
            },300);
        }

        async function GetTaskDistribution(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetTaskDistribution", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    tds = response;
                    GenerateChartTaskDistribution();
                }
            });
        }

        function GenerateChartTaskDistribution() {
            let task_names = [];
            let hours = [];

            for (let i = 0; i < tds.length; i++) {
                task_names.push(tds[i].task_id + ' - ' + tds[i].task_name);
                hours.push(tds[i].hours);
            }

            if (chartTaskDistribution !== undefined) {
                chartTaskDistribution.destroy();
            }

            let ctx3 = document.getElementById('taskDistribution').getContext('2d');
            chartTaskDistribution = new Chart(ctx3, {
                type: 'bar',
                data: {
                    labels: task_names,
                    datasets: [
                        {
                            label: 'Hours',
                            data: hours,
                            backgroundColor: colors,
                            borderColor: colors,
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    indexAxis: 'y',
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)',
                            },
                            title: {
                                text: 'Hour(s)',
                                color: 'rgba(255,255,255,0.8)',
                                display: true
                            }
                        },
                        y: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)',
                                align: 'left',
                            },
                            title: {
                                text: 'Tasks',
                                color: 'rgba(255,255,255,0.8)',
                                display: true,
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: 'rgba(255,255,255,0.8)'
                            },
                            display: false
                        }
                    }
                }
            });
        }

        async function GetManpowerRatio(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetManpowerRatio", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    mrs = response;
                    GenerateChartManpowerRatio();
                }
            });
        }
        async function GetManpowerOTRatio(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetManpowerOTRatio", "Job")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    mrs_ot = response;
                    GenerateChartManpowerOTRatio();
                }
            });
        }

        function GenerateChartManpowerRatio() {
            setTimeout(function(){
                let datas = [];
                datas.push(["Name","Hours"]);
                for(let i=0;i<mrs.length;i++){
                    let name = mrs[i].user_name;
                    datas.push([name , mrs[i].hours]);
                }
                var data = google.visualization.arrayToDataTable(datas);

                var options = {
                  title: 'Manpower Ratio',
                  titleTextStyle:{color:'white',fontSize: 16},
                  pieHole: 0.65,
                  colors:colors,
                  pieSliceText:'percentage',
                  is3D:false,
                  backgroundColor:'#343A40',
                  legend:{position:'bottom',textStyle: {color: 'white', fontSize: 14}},
                  pieStartAngle:90,
                  pieSliceBorderColor:'#343A40',
                };

                var chart = new google.visualization.PieChart(document.getElementById('manpowerRatio'));
                chart.draw(data, options);
            },300);
        }

        function GenerateChartManpowerOTRatio() {
            setTimeout(function () {
                let datas = [];
                datas.push(["Name", "Hours"]);
                for (let i = 0; i < mrs_ot.length; i++) {
                    let name = mrs_ot[i].user_name;
                    datas.push([name, mrs_ot[i].hours]);
                }
                var data = google.visualization.arrayToDataTable(datas);

                var options = {
                    title: 'Manpower OT Ratio',
                    titleTextStyle: { color: 'white', fontSize: 16 },
                    pieHole: 0.65,
                    colors: colors,
                    pieSliceText: 'percentage',
                    is3D: false,
                    backgroundColor: '#343A40',
                    legend: { position: 'bottom', textStyle: { color: 'white', fontSize: 14 } },
                    pieStartAngle: 90,
                    pieSliceBorderColor: '#343A40',
                };

                var chart = new google.visualization.PieChart(document.getElementById('manpowerOTRatio'));
                chart.draw(data, options);
            }, 300);
        }

        function GenerateTableProcess(processes) {
            let datas = [];
            if (table_process !== null)
                $('#table_process').DataTable().destroy();

            for (let i = 0; i < processes.length; i++) {

                let process = processes[i].process_name;
                datas.push([
                    process
                ]);
            }

            table_process = $('#table_process').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: {
                    left: 2
                },
                columnDefs: [
                    {

                    },
                ],
                rowCallback: function (row, data) {

                },
                searching: false,
                ordering: false,
                paging: false,
                info : false
            });
        };


        function GenerateTableSystem(systems) {
            let datas = [];
            if (table_system !== null)
                $('#table_system').DataTable().destroy();

            for (let i = 0; i < systems.length; i++) {

                let system = systems[i].system_name;
                datas.push([
                    system
                ]);
            }

            table_system = $('#table_system').DataTable({
                data: datas,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                fixedHeader: true,
                fixedColumns: {
                    left: 2
                },
                columnDefs: [
                    {

                    },
                ],
                rowCallback: function (row, data) {

                },
                searching: false,
                ordering: false,
                paging: false,
                info : false
            });
        };
        async function GetManpowerDistribution(job_id) {
            await $.ajax({
                type: "GET",
                url: '@Url.Action("GetManpowerDistribution", "Analysis")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_id
                },
                success: function (response) {
                    mds = response;
                    GenerateChartManpowerDistribution();
                }
            });
        }

        function GenerateChartManpowerDistribution() {
            let users = mds.map(m => m.user_id);
            users = [...new Set(users)];

            let tasks = mds.map(m => m.task_id);
            tasks = [...new Set(tasks)];

            let hours = [];
            for (let i = 0; i < users.length; i++) {
                for (let j = 0; j < tasks.length; j++) {
                    let hrs = [];
                    hrs = mds.filter(f => f.user_id === users[i] && f.task_id === tasks[j]).map(m => m.hours);
                    if (hrs[0] === undefined) {
                        hrs[0] = 0;
                    }
                    hours.push([users[i], tasks[j], hrs[0]]);
                }
            }

            let ds = [];
            for (let i = 0; i < tasks.length; i++) {
                let hrs = [];
                hrs = hours.filter(f => f[1] === tasks[i]).map(m => m[2]);
                let tt = mds.filter(f => f.task_id === tasks[i]);
                ds.push({
                    label: tt[0].task_id + " - " + tt[0].task_name,
                    data: hrs,
                    backgroundColor: colors[i],
                    borderColor: colors[i],
                    borderWidth: 1
                });
            }

            if (chartManpowerDistribution !== undefined) {
                chartManpowerDistribution.destroy();
            }

            let ctx4 = document.getElementById('manpowerDistribution').getContext('2d');
            chartManpowerDistribution = new Chart(ctx4, {
                type: 'bar',
                data: {
                    labels: users,
                    datasets: ds
                },
                options: {
                    indexAxis: 'y',
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)'
                            },
                            title: {
                                text: 'Hour(s)',
                                color: 'rgba(255,255,255,0.8)',
                                display: true,
                            },
                            stacked: true
                        },
                        y: {
                            ticks: {
                                color: 'rgba(255,255,255,0.8)'
                            },
                            title: {
                                text: 'Name',
                                color: 'rgba(255,255,255,0.8)',
                                display: true,
                            },
                            stacked: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                color: 'rgba(255,255,255,0.8)'
                            }
                        }
                    }
                }
            });
        }

        $('#select_process').on('change',function(){
            $('#add_process').attr('disabled',false);
        });

        $('#select_system').on('change',function(){
            $('#add_system').attr('disabled',false);
        });

        $('#add_process').on('click',function(){
            let _process = $('#select_process').val();
            let process = processes.filter(f=>f.process_id === _process ).map(m=>m.process_name)[0];
            let check_process = set_processes.find(f=>f.process_name == process);
            if (check_process == undefined){
                set_processes.push({'process_id': _process ,'process_name': process});
                GenerateTableProcess(set_processes);
            }
        });

        $('#add_system').on('click',function(){
            let _system = $('#select_system').val();
            let system = systems.filter(f=>f.system_id === _system ).map(m=>m.system_name)[0];
            let check_system = set_systems.find(f=>f.system_name == system);
            if (check_system == undefined){
                set_systems.push({'system_id': _system ,'system_name': system});
                GenerateTableSystem(set_systems);
            }
        });

        $('#table_process tbody').on('click', 'tr', async function () {
            let admin = '@Model.role' == "Admin" ? true : false;
            if (admin) {
                let data = table_process.row(this).data();
                let process = data[0];
                $('#edit_process_name').val(process);
                $('#modal_edit_process').modal();
            }
        });

        $('#table_system tbody').on('click', 'tr', async function () {
            let admin = '@Model.role' == "Admin" ? true : false;
            if (admin) {
                let data = table_system.row(this).data();
                let system = data[0];
                $('#edit_system_name').val(system);
                $('#modal_edit_system').modal();
            }
        });

        async function UpdateJob(job_string) {
            await $.ajax({
                type: "PATCH",
                url: '@Url.Action("UpdateJobByProcessSystem", "JobStatus")',
	            contentType: 'application/x-www-form-urlencoded',
                data: {
                    job_string
                },
                success: function (response) {
                    if (response === "Success") {
                        location.reload();
                    }
                    else {
                        alert(response);
                    }
                }
            });
        }

        $('#btn_save').on('click', function () {
            let job_id = $('#job_id').val();

            let str_process = "";
            let str_system = "";
            let list_process = Array.from(set_processes).map(m=>m.process_id);
            let list_system = Array.from(set_systems).map(m=>m.system_id);
            list_process.sort();
            list_system.sort();
            for(let k=0 ;k<list_process.length;k++){
                if (k === list_process.length - 1){
                    str_process += list_process[k];
                }else{
                    str_process += list_process[k] + ",";
                }
            }

            for(let k=0 ;k<list_system.length;k++){
                if (k === list_system.length - 1){
                    str_system += list_system[k];
                }else{
                    str_system += list_system[k] + ",";
                }
            }

            let job_string = JSON.stringify({
                "job_id": job_id,
                "process":str_process,
                "system": str_system,
            });

            UpdateJob(job_string);
        });

        $('#btn_process_delete').on('click',function(){
            let process = $('#edit_process_name').val();
            let process_id = set_processes.filter(f=>f.process_name == process).map(m=>m.process_id)[0];

            let index = set_processes.findIndex(f=>f.process_id == process_id);
            set_processes.splice(index,1);
            GenerateTableProcess(set_processes);
            $('#modal_edit_process').modal('hide');
        });

        $('#btn_system_delete').on('click',function(){
            let system = $('#edit_system_name').val();
            let system_id = set_systems.filter(f=>f.system_name == system).map(m=>m.system_id)[0];

            let index = set_systems.findIndex(f=>f.system_id == system_id);
            set_systems.splice(index,1);
            GenerateTableSystem(set_systems);
            $('#modal_edit_system').modal('hide');
        });
    </script>
}